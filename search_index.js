var documenterSearchIndex = {"docs":
[{"location":"chapter7/#.-Writing-test-software-1","page":"7 - Writing test software","title":"7. Writing test software","text":"","category":"section"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"Under development!","category":"page"},{"location":"chapter7/#What-you-will-learn-1","page":"7 - Writing test software","title":"What you will learn","text":"","category":"section"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"Pages = [\"chapter7.md\"]","category":"page"},{"location":"chapter7/#Folder-structure-AppliInvoicing-module-1","page":"7 - Writing test software","title":"Folder structure AppliInvoicing module","text":"","category":"section"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"Tests should be placed in the file runtests.jl in the folder test.","category":"page"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"ᵥ📁AppliInvoicing\n   📁 .git\n   📁 src\n  ᵥ📁 test\n     📄 runtests.jl","category":"page"},{"location":"chapter7/#Using-@testset-and-@test-1","page":"7 - Writing test software","title":"Using @testset and @test","text":"","category":"section"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"An example from AppliInvoicing:","category":"page"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"using Test\n\n@testset \"Orders\" begin\n    using AppliSales\n    orders = AppliSales.process()\n    @test length(orders) == 3\n    @test orders[1].org.name == \"Scrooge Investment Bank\"\n    @test orders[1].training.name == \"Learn Smiling\"\nend","category":"page"},{"location":"chapter7/#runtests.jl-1","page":"7 - Writing test software","title":"runtests.jl","text":"","category":"section"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"When you put your tests in the file runtests.jl you can also run the tests of a module elsewhere, e.g. AppliMaster. Make sure you added the package (module) and are in the Package manager mode.","category":"page"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"The Package manager command help (?):","category":"page"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"julia> using Test\n\njulia> ]\n\n(v1.3) pkg> ?test\n  test [--coverage] pkg[=uuid] ...\n\n  Run the tests for package pkg. This is done by running the file **test/runtests.jl** in the package directory. The option --coverage\n  can be used to run the tests with coverage enabled. The startup.jl file is disabled during testing unless julia is started with\n  --startup-file=yes.","category":"page"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"Example of running runtests.jl of AppliInvoicing.","category":"page"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"(v1.3) pkg> test AppliInvoicing\n  Testing AppliInvoicing\n\nTest Summary: | Pass  Total\nOrders        |    3      3\nTest Summary:  | Pass  Total\nUnpaidInvoices |    7      7\nTest Summary:           | Pass  Total\nRetrieve UnpaidInvoices |    7      7\nTest Summary:                   | Pass  Total\nRetrieve BankStatement from CSV |    2      2\nTest Summary: | Pass  Total\nJounalEntry's |    3      3\nTest Summary:       | Pass  Total\nprocess(db, orders) |    6      6\nTest Summary:                | Pass  Total\nretrieve_unpaid_invoices(db) |    2      2\nTest Summary:               | Pass  Total\nprocess(db, unpaid_invoices |    4      4\n   Testing AppliInvoicing tests passed","category":"page"},{"location":"chapter7/#","page":"7 - Writing test software","title":"7 - Writing test software","text":"See the all tests: AppliInvoicing.jl/test/runtests.jl","category":"page"},{"location":"references/#References-1","page":"References","title":"References","text":"","category":"section"},{"location":"references/#Julia-1","page":"References","title":"Julia","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Think Julia\nThe Emergent Features of JuliaLang: Part I\nThe Emergent Features of JuliaLang: Part II - Traits\nParallel Computing\nNaelsonDouglas/DistributedMachineLearningThesis\nBlue: a Style Guide for Julia\nPerformance Tips","category":"page"},{"location":"references/#Julia-Debugging-1","page":"References","title":"Julia Debugging","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"A Julia interpreter and debugger","category":"page"},{"location":"references/#Julia-Unicode-1","page":"References","title":"Julia Unicode","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Unicode Input","category":"page"},{"location":"references/#Julia-Wikibooks-1","page":"References","title":"Julia Wikibooks","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Index\nIntroducing Julia/Types\nIntroducing Julia/DataFrames\nIntroducing Julia/Working with dates and times","category":"page"},{"location":"references/#Julia-Machine-Learning-1","page":"References","title":"Julia Machine Learning","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Data science for managers: Programming languages\nJulia Machine Learning for Slowpokes","category":"page"},{"location":"references/#Julia-Package-Manger-1","page":"References","title":"Julia Package Manger","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"A Brief Introduction to Package Management with Julia 1.0\nCreating Packages\nPkg + BinaryBuilder – The Next Generation\nOverview popular Julia packages","category":"page"},{"location":"references/#IJulia-1","page":"References","title":"IJulia","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Running a notebook server","category":"page"},{"location":"references/#Atom/Juno-Documentation-1","page":"References","title":"Atom/Juno Documentation","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Juno Documentation","category":"page"},{"location":"references/#Docker-1","page":"References","title":"Docker","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Dockerize an SSH service\nssh key generation using dockerfile\nMultiple Computer Example\nRunning the \"Real Time Voice Cloning\" project in Docker","category":"page"},{"location":"references/#Miscellaneous-1","page":"References","title":"Miscellaneous","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"Auto Cue\nThis AI Clones Your Voice After Listening for 5 Seconds\nJulia Computing and NVIDIA Bring Julia GPU Computing to Arm\nOptimizing Serial Code","category":"page"},{"location":"blog/#Blog-1","page":"Blog","title":"Blog","text":"","category":"section"},{"location":"blog/#-1","page":"Blog","title":"2020","text":"","category":"section"},{"location":"blog/#/07/2020-1","page":"Blog","title":"02/07/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Chapter 4, 5 en 6 are ready for a final check.","category":"page"},{"location":"blog/#/05/2020-1","page":"Blog","title":"02/05/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"While working on the AppliMaster module, I got yesterday the impression that I should always be working with the local package repository, ] active .:","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Adding packages will update Project.toml, the file with the dependencies, and update the local Manifest.toml file. When you delete Manifest.toml, you have to add the packages again.\nWhen cloning a project works without adding the packages again.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"So I removed AppliInvoicing, AppliGeneralLedger, and AppliSales from the general repository. This morning I started AppliMaster in Atom. My code in test_remote_channels.jl didn't work anymore. The two Databases invoicing.sqlite and ledger.sqlite were not created.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I added the packages AppliInvoicing, AppliGeneralLedger, and AppliSales again to the general repository, and my code was running well. The only explanation I could think of: remote code only looks at the general repository.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I need to review the documentation on this subject.","category":"page"},{"location":"blog/#/02/2020-1","page":"Blog","title":"02/02/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"The pages test_remote_channels.jl and myfunctions.jl, I have embellished with @info. The flow of the data has now become more explicit. The code is on github: test_remote_channels.jl.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Working with channels runs smoothly. I only run the functions that perform the operations on a different core. The while true loops for task_1 and task_2 tasks run locally. Should I also run these loops remotely?","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"So I had to renumber the subsequent chapters.","category":"page"},{"location":"blog/#/01/2020-1","page":"Blog","title":"02/01/2020","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Today I copied the blog from the AppliGate website to The course environment.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Things are going well with the course. The following modules are now ready(!):","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"AppliMaster - the basic module.\nAppliInvoicing - the application itself.\nAppliSales - sending test orders to AppliInvoicing.\nAppliGeneralLedger - to process journal entries from AppliInvoicing.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"In the last couple of weeks, I have been experimenting with the communication between the different parts. For the time being, I decided to work with Julia's channels. The implementation is in AppliMaster, testremotechannels.jl.","category":"page"},{"location":"blog/#-2","page":"Blog","title":"2019","text":"","category":"section"},{"location":"blog/#/05/2019-1","page":"Blog","title":"12/05/2019","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Last week I managed to establish an SSH connection between two containers. This week I could finish Chapter 9, Create the Container, more or less. The next step is to test a channel connection between two containers.","category":"page"},{"location":"blog/#/15/2019-1","page":"Blog","title":"11/15/2019","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Almost ready to link www.appligate.nl to rbontekoe.github.io. We have to change the CNAME record at the provider from appligate.appspot.com to rbontekoe.github.io.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"We also started with writing the course material for the online training BAWJ.","category":"page"},{"location":"blog/#/21/2019-1","page":"Blog","title":"10/21/2019","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Why not build a website with Documenter.jl? We did it today. When you go to AppliGate, you enter our new site. In the meantime, we got more experience with Julia. E.g., we resized Rob's picture with Images.jl. It was straightforward.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"julia> using Images\n\njulia> img = load(\"rob.png\")\n\njulia> img2 = imresize(img, ratio=0.5)\n\njulia> save(\"rob2.png\", img2)","category":"page"},{"location":"blog/#/17/2019-1","page":"Blog","title":"9/17/2019","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Reading Think Julia I discovered the package Serialization. While playing with it, I realized that it could solve my CQRS and Event Sourcing problem. With the method serialize, you can create a text representation of an object, that you can store. With deserialize, you do the reverse. Serialize writes to an IOStream, and deserialize reads from it. An IOStream can be an IOBuffer or a file. It makes Event Sourcing easier.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"I also looked at channels. You can use channels to communicate between processes. For the time being, I will use inter CPU-core communication. Later on, I extend it to remote nodes. I only have to expand the methods of createSubscriber and createPublisher.","category":"page"},{"location":"blog/#/10/2019-1","page":"Blog","title":"9/10/2019","text":"","category":"section"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Last week I was busy implementing the database methods. I realized that the domain objects I wanted to keep must have an identification code. So Subscriber, Publisher, and Message got an id. To create the id, I used the hash function with a name and time as a parameter. It had consequences for the documentation. In the example code, I used the tag 'jldoctest,' so Documenter could test the example code during the generation of the manual. Because the ids keep changing, I had to give up. Too bad, because I found that a strong point of Documenter.jl. I replaced the test tag 'jldoctest' with the language tag 'julia.' Maybe there is something to do against continually changing values.","category":"page"},{"location":"blog/#","page":"Blog","title":"Blog","text":"Infected by the CQRS thought, I decided to add changed domain objects to the database instead of modifying an existing record.","category":"page"},{"location":"chapter1/#.-Introduction-Notebook-1","page":"1 - Intro Notebook","title":"1. Introduction Notebook","text":"","category":"section"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Pages = [\"chapter1.md\"]","category":"page"},{"location":"chapter1/#What-is-a-notebook?-1","page":"1 - Intro Notebook","title":"What is a notebook?","text":"","category":"section"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"In this case, \"notebook\" or \"notebook documents\" denote documents that contain both code and rich text elements, such as figures, links, equations, ... Because of the mix of  code and text elements, these documents are the ideal place to bring together an analysis description, and its results, as well as, they can be executed perform the data analysis in real tme.See","category":"page"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Top","category":"page"},{"location":"chapter1/#Options-to-use-a-notebook-1","page":"1 - Intro Notebook","title":"Options to use a notebook","text":"","category":"section"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"You have several option to work with IJulia:","category":"page"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"You have installed Julia on your own machine.\nYou have installed Docker on your own machine and run IJulia from a container with Julia and IJulia installed.\nYou make use of the IJulia server installed on the machne of your instructor.","category":"page"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"The IJulia Notebook is installed on the machine of the instructor, but you can also install IJula on your own notebook. Follow the instruction in the appendix.","category":"page"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Top","category":"page"},{"location":"chapter1/#Starting-IJulia-1","page":"1 - Intro Notebook","title":"Starting IJulia","text":"","category":"section"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Ask your instructor for the public ip-address and the token.","category":"page"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"The first time you enter the IJulia server, it will ask you one time for the token.","category":"page"},{"location":"chapter1/#Login-to-the-IJulia-server-1","page":"1 - Intro Notebook","title":"Login to the IJulia server","text":"","category":"section"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Step Action Comment\n1 Start browser \n2 http://x.x.x.x:8888 Ask instructor for the complete the public ip-address of the IJulia server\n3 Enter the token in the Password or token field \n4 Click on the Log in button ","category":"page"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Top","category":"page"},{"location":"chapter1/#Create-a-new-notebook-1","page":"1 - Intro Notebook","title":"Create a new notebook","text":"","category":"section"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"(Image: Test)","category":"page"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Step Action/Response Comment\n1 Click on work directory \n2 Click on button New Open New menu.\n3 Select on item Julia.x.x.x Create a new Julia Notebook.\n New Notebook is opened \n4 Place the cursor in the first cel In this cell you can type your code.\n5 println(\"Hello World!\") Type your Julia code.\n6 Shift-Enter Activate the code and create a new cell","category":"page"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Top","category":"page"},{"location":"chapter1/#Notebook-commands-1","page":"1 - Intro Notebook","title":"Notebook commands","text":"","category":"section"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Working with a Notebook is rather intuitive. Here are some commands you will often use.","category":"page"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Command Comment\nShift-Enter Execute code and create a new cell below.\nCtrl-Enter Execute code and stay in the cell\nTab Code completion, e.g. printl-Tab => println.\nDouble Tab List with option, e.g. print-Tab displays print, println, and printstyled\n\\sqrt-tab Special characters, in this case √.\nEsc-A Create empty cell above the current cell.\nEsc-B Create empty cell below current cell.\nEsc-M Change to a markdown cell.\nEsc-Y Change to code cell.","category":"page"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Click on the keyboard icon to see more options.","category":"page"},{"location":"chapter1/#","page":"1 - Intro Notebook","title":"1 - Intro Notebook","text":"Top","category":"page"},{"location":"chapter1/#Summary-1","page":"1 - Intro Notebook","title":"Summary","text":"","category":"section"},{"location":"chapter13/#.-Running-the-containers-1","page":"13 - Running the containers","title":"13. Running the containers","text":"","category":"section"},{"location":"chapter4/#.-Implementing-the-design-1","page":"4 - Implementing the design","title":"4. Implementing the design","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter4/#What-you-will-learn-1","page":"4 - Implementing the design","title":"What you will learn","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Pages = [\"chapter4.md\"]","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"In chapter 3, we saw how the design of the invoicing module. In this chapter, we will implement it, the AppliInvoicing module. Two other modules that will come in the picture are AppliSales and AppliGeneralLedger.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"The AppliSales module supplies the orders that the AppliInvoicing needs to create the invoices when the course starts. Besides sending and storing the invoices, it also creates the journal entries for the AppliGeneralLedger module.","category":"page"},{"location":"chapter4/#Development-environment-1","page":"4 - Implementing the design","title":"Development environment","text":"","category":"section"},{"location":"chapter4/#Application-folder-and-file-structure-1","page":"4 - Implementing the design","title":"Application folder and file structure","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"The final folder structure and files for our Julia application.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"ᵥ📁AppliInvoicing\n   📁 .git\n  ᵥ📁 src\n    ᵥ📁 api\n       📄 api.jl\n    ᵥ📁 domain\n       📄 domain.jl\n    ᵥ📁 infrastructure\n       📄 db.jl\n       📄 infrastructure.jl\n     📄 AppliInvoicingl.jl\n     📄 test.jl\n  ᵥ📁 test\n     📄 runtests.jl\\\n   📄 bank.csv\n   📄 LICENCE\n   📄 Manifest.toml\n   📄 Project.toml  #1\n   📄 README.md","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"#1 Contains dependencies when working in the local activity mode. Julia adds dependencies automatically added when you add a package (module). Manifest.toml contains the references to the modules.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Figure 1","category":"page"},{"location":"chapter4/#Activity-4.1:-Create-the-minimum-folder-structure-and-the-file-domain.jl-1","page":"4 - Implementing the design","title":"Activity 4.1: Create the minimum folder structure and the file domain.jl","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"In this activity you will create the folder structure for the invoicing process. You partial set-up the folder structure according to figure 1:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Create the base folder AppliInvoicing.\nCreate a repository on GitHub.\nCreate the folder domainunder src.\nCreate the file domain.jl.","category":"page"},{"location":"chapter4/#Create-the-base-folder-AppliInvoicing-1","page":"4 - Implementing the design","title":"Create the base folder AppliInvoicing","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"All steps are necessary, because we want to create a Julia module form our code.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Prerequisites","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Your computer OS is Ubuntu 18.04.\nYou have sudo (administraton) rights.\ngit is installed.\natom/juno installed.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"You can install git with the command: sudo apt-get install git.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Atom/juno is the IDE that is used in our example. To install juno see the next instruction.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Step Action Comment\n1 $ mkdir julia-projects Create a working directory.\n2 $ cd julia-projects \n3 $ julia Start Julia.\n4 julia > ] Open the package manager.\n5 pkg> generate AppliInvoicing Generate e.g. the package AppliInvoicing. The response you get is:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Generating project AppliInvoicing:     AppliInvoicing/Project.toml     AppliInvoicing/src/AppliInvoicing.jl","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Project.toml contains the package name and the dependencies.","category":"page"},{"location":"chapter4/#Create-a-repository-on-GitHub-1","page":"4 - Implementing the design","title":"Create a repository on GitHub","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Close the package manager and Julia: Ctrl-C, Ctrl-D.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Step Action Comment\n6 Go to GitHub Create an account if you don't have one. What is GitHub.\n7 Click on the tab Repositories \n8 Click on the green button New Bottom upper right side.\n9 Give the repository a name E.g. AppliInvoicing.jl\n10 Give the repository a description E.g. Invoicing module for the course BAWJ.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"warning: Warning\nStart with a empty repository!","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Step Action Comment\n11 Click on the green button Create repository Button is located at the bottom side.\n12 Return to your computer and enter the folder AppliInvoicing ","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Install git: apt-get install git.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Step Action Comment\n13 $ echo \"# AppliInvoicing\" >> README.md Create README.md file.\n14 $ git init \n16 $ git status The response you get is:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"`On branch master","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"No commits yet","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Untracked files:   (use \"git add <file>...\" to include in what will be committed)","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Project.toml\nREADME.md\nsrc/","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"nothing added to commit but untracked files present (use \"git add\" to track)`","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Step Action Comment\n17 $ git add Project.toml Add file to staged changes.\n18 $ git add README.md \n19 $ git add src/ \n20 $ git status The response is:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"`On branch master","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"No commits yet","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Changes to be committed:   (use \"git rm –cached <file>...\" to unstage)","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"new file:   Project.toml\nnew file:   README.md\nnew file:   src/AppliInvoicing.jl`","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Step Action Comment\n21 $ git commit -m \"first commit\" The response is:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"[master (root-commit) 3b06d57] first commit  3 files changed, 10 insertions(+)  create mode 100644 Project.toml  create mode 100644 README.md  create mode 100644 src/AppliInvoicing.jl","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Step Action Comment\n22 $ git remote add origin https://github.com/rbontekoe/AppliInvoicing.jl.git \n23 $ git push -u origin master Push your files to your GitHub repository. GitHub asks for your userid and password.\n24 Check the update on GitHub ","category":"page"},{"location":"chapter4/#Create-the-folder-domain-under-the-src-folder-1","page":"4 - Implementing the design","title":"Create the folder domain under the src-folder","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Step Action Comment\n1 Enter the AppliInvoicing folder \n2 $ atom . Start Atom in the current directory AppliInvoicing.\n3 Remove all Taps in the right pane. The Tabs are: Telemerty Consent, Welcome, and Welcom Guide. A tab will be remove by clicking on the x-symbol.\n4 Right click on: src \n5 Select: New folder \n6 Type: domain \n7 Press: <Enter> The new folder domain appears under the folder src.\n8 Select the folder: domain \n9 Right click on: domain \n10 Select: New file \n11 Type: domain.jl \n12 Press: <Enter> A new document appears in the pane next to the navigation pane.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"In the navigation pane you see the next folders and files:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"ᵥ📁 AppliInvoicing\n   📁 .git\n  ᵥ📁 src\n    ᵥ📁 domain\n       📄 domain.jl\n     📄 AppliInvoicing.jl\n   📄 Project.toml\n   📄 README.md","category":"page"},{"location":"chapter4/#domain.jl-1","page":"4 - Implementing the design","title":"domain.jl","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"To define a data structure and type, use the keyword struct. The body consists of the fields of the data structure.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Use constructors to define standard values, like the default currency symbol. It simplifies the creating op the object.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"To keep things clear we create the following objects as part of the invoice:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"MetaInvoice, containing references to the order, the training, and the currency.\nHeaderInvoice, contains all the general information.\nOpentrainingItem, the invoice body consists of one item.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"using Dates\nusing AppliGeneralLedger\nusing AppliSales # needed for test.jl and runtests.jl\n\n# Meta data\nstruct MetaInvoice\n    order_id::String\n    training_id::String\n    date::DateTime #1\n    currency::String\n    currency_ratio::Float64\n    # Constructors\n    MetaInvoice(order_id, training_id) = new(order_id, training_id, now(), \"€\", 1.0) #2\n    MetaInvoice(order_id, training_id, date, currency, currency_ratio) = new(order_id, training_id, now(), currency, currency_ratio)\nend # MetaInvoice\n\nstruct Header #3\n    invoice_nbr::String #4\n    name::String\n    address::String\n    zip::String\n    city::String\n    country::String\n    order_ref::String\n    name_contact::String\n    email_contact::String\nend # HeaderInvoice\n\nstruct OpentrainingItem #5\n    name_training::String\n    date::DateTime\n    price_per_student::Float64\n    students::Array{String, 1}\n    vat_perc::Float64\n    # constructors\n    OpentrainingItem(name_training, date, price_per_student, students) = new(name_training, date, price_per_student, students, 0.21) #6\n    OpentrainingItem(name_training, date, price_per_student, students, vat_perc) = new(name_training, date, price_per_student, students, vat_perc)\nend # OpentrainingItem\n\nstruct UnpaidInvoice\n    id::String\n    meta::MetaInvoice\n    header::Header\n    body::OpentrainingItem\nend # UnpaidInvoice\n\nstruct BankStatement\n    date::Date\n    descr::String\n    iban::String\n    amount::Float64\nend # BankStatement\n\nstruct PaidInvoice\n    id::String\n    meta::MetaInvoice\n    header::Header\n    body::OpentrainingItem\n    stm::BankStatement\nend # PaidInvoice","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"#1 The invoice date.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"#2 We assume that most students are from a country in Europe where they have the euro as currency.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"#3 The information needed for the header of the invoice.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"#4 In the future, we will automatically generate a unique id.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"#5 It has the course information and the students who will attend the training.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"#6 You create a instance of a data structure by using its name with the arguments between brackets. If you want to instantiate it with less arguments you can define constructors (or you use keyword arguments in functions or methods).","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"On the domain page, one defines the custom data structures that make-up our domain. To avoid too many method arguments, we break it up in the substructures as MetaInvoice, Header, and OpentrainingItem.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Header represents the information we need for the header of the invoice. OpentrainingItem serves as the body of an invoice. In practice, the body of an invoice could consist of several lines, but we leave it now limited to one line.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"I have split an invoice into two data structures: UnpaidInvoice and PaidInvoice. It facilitates the property of Julia, which is called multiple dispatch. You can see an example of it in the API layer where we use the same method name, create, for both data structures, which each have a different operation.","category":"page"},{"location":"chapter4/#Exercice-4.1-1","page":"4 - Implementing the design","title":"Exercice 4.1","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Copy the domain data to the domain.jl file in Juno.\nSelect the first statement and press Shift-Enter¹. Juno evaluates the line and prints the result at the end of it. Repeat it for all elements.\nSave the file with Ctrl-S.\nCreate a folder api under the scr-folder.\nCreate the empty file api.jl in the folder api.\nCreate the empty files infrastructure.jl and db.jl in the folder 'infrastructure.'","category":"page"},{"location":"chapter4/#Notes-1","page":"4 - Implementing the design","title":"Notes","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"¹ In Juno pressing Shift-Enter executes the selected statement and moves the cursor to the next piece of code. Ctrl-Enter doesn't touch the cursor.","category":"page"},{"location":"chapter4/#api.jl-1","page":"4 - Implementing the design","title":"api.jl","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"In the API, we only use Julia code and the elements from the domain, the basic idea behind the onion architecture.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"We use the include statement to have access to the domain elements. The relative path is to the domain.jl file.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"We define in the API the functions and the methods that our program needs.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Functions start with the keyword function followed by the function name and the arguments between brackets:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"function hello(name)\n\tprintln(\"Hello \" * name) # the * is also used for string concatenation\nend","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Methods start with the name of the method followed by the arguments between brackets, an equal sign, and a statement:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"hello(name) = println(\"Hello \" * name)","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"When a method has more than one statement, we embed the statements between a begin ... end block:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"hello(name) = begin\n\tname = uppercase(name)\n\tprintln(\"HELLO \" * name)\nend","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"There is no difference between functions and methods.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"include(\"../domain/domain.jl\") #1\n\nimport AppliSales.Order # Order is not exported but is refered to in the next method #2\n\n# create unpaid invoices from an order\ncreate(order::Order, invoice_id::String)::UnpaidInvoice = begin #3\n    meta = MetaInvoice(order.id, order.training.id)\n    header_invoice = Header(\n        invoice_id, order.org.name, order.org.address, order.org.zip, order.org.city, order.org.country, order.order_ref, order.contact_name, order.contact_email)\n    body_invoice = OpentrainingItem(order.training.name, order.training.date, order.training.price, order.students)\n    return UnpaidInvoice(invoice_id, meta, header_invoice, body_invoice) #4\nend\n\n# create paid invoice from a bank statement\ncreate(invoice::UnpaidInvoice, stm::BankStatement)::PaidInvoice = begin\n    id = invoice.id\n    meta = invoice.meta\n    header = invoice.header\n    body = invoice.body\n    stm = stm\n    return PaidInvoice(id, meta, header, body, stm)\nend\n\n# create journal entries from an unpaid invoice\n# the create_journal_entry function is exported by AppliGeneralLedger\nfunction conv2entry(inv::UnpaidInvoice, from::Int, to::Int)\n    id = string(Date(now())) * \"-\" * string(global n += 1)\n    customer_id = inv.header.name\n    invoice_nbr = inv.header.invoice_nbr\n    debit = inv.body.price_per_student * length(inv.body.students)\n    credit = 0.0\n    vat = debit * inv.body.vat_perc\n    descr = inv.body.name_training\n    return create_journal_entry(id, customer_id, invoice_nbr, from, to, debit, credit, vat, descr)\nend\n\n# create journal entries from a paid invoice\n# the create_journal_entry function is exported by AppliGeneralLedger test module\nfunction conv2entry(inv::PaidInvoice, from::Int, to::Int)\n    id = string(Date(now())) * \"-\" * string(global n += 1)\n    customer_id = inv.header.name\n    invoice_nbr = inv.header.invoice_nbr\n    debit = inv.stm.amount\n    credit = 0.0\n    vat = 0.0\n    descr = inv.body.name_training\n    return create_journal_entry(id, customer_id, invoice_nbr, from, to, debit, credit, vat, descr)\nend","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"#1 It loads the domain elements.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"#2 I only export the api and infrastructure pages from modules. Exporting domain elements can give irritating override errors. In the first API-method, we refer to Order, which cannot found by Julia. To make it accessible, use the import statement.  ","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"#3 As we mentioned before, Julia uses multiple dispatch as a kind of overloading we know from object-oriented languages. It means that you can use the same method or function name as long as the signatures are different. As you can see, we use the create method two times, one for creating unpaid invoices and one for paid invoices.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"When you use the help function ? create it shows the two.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"#4 When the last statement of a function block is also the return value, you can leave out the keyword return.","category":"page"},{"location":"chapter4/#infrastructure.jl-1","page":"4 - Implementing the design","title":"infrastructure.jl","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"The infrastructure layer, the outer peel of the onion, uses the elements from the api and the domain layers.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"The two methods that execute the workflow as we have described in our invoicing procedure are:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"process(path, orders::Array{Order, 1})\nprocess(path, invoices::Array{UnpaidInvoice, 1}, stms::Array{BankStatement, 1})","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"The first method creates unpaid invoices, the second one the paid invoices. Both generate the journal entries for the general ledger.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Take a peek at chapter 6 Testing the application to get an idea how the data flows through the application.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"using CSV\nusing DataFrames\n\ninclude(\"../api/api.jl\")\ninclude(\"./db.jl\") # database functions\n\n@enum TableName begin\n    UNPAID\n    PAID\nend # enumerator for TableName types\n\n# get last statement number for today\nn = 0\n\nprocess(path, orders::Array{Order, 1}) = begin\n    # connect to db\n    db = connect(path)\n\n    # get last order number\n    invnbr = 1000 #ToDo\n\n    # create invoices\n    invoices = [create(order, \"A\" * string(invnbr += 1)) for order in orders]\n\n    # archive invoices\n    archive(db, string(UNPAID), invoices)\n\n    # create journal entries from invoices\n    return entries = [conv2entry(inv, 1300, 8000) for inv in invoices]\nend # process(path, orders::Array{Order, 1})\n\n#process(bankstm::Array(Bankstatement, 1) = begin\nprocess(path, invoices::Array{UnpaidInvoice, 1}, stms::Array{BankStatement, 1}) = begin\n    # connect to db\n    db = connect(path)\n\n    # create array with potential paid invoices based on received bank statements\n    potential_paid_invoices = []\n    for unpaid_invoice in invoices\n      for stm in stms # get potential paid invoices\n        if occursin(unpaid_invoice.id, stm.descr) # description contains invoice number\n          push!(potential_paid_invoices, create(unpaid_invoice, stm))\n        end\n      end\n    end\n\n    # convert to an array with PaidInvoice's\n    paid_invoices = convert(Array{PaidInvoice, 1}, potential_paid_invoices)\n\n    # archive PaidInvoice's\n    archive(db, string(PAID), paid_invoices)\n\n    # return array with JournalEntry's\n    return entries = [conv2entry(inv, 1150, 1300) for inv in paid_invoices]\nend # process(path, invoices::Array{UnpaidInvoice, 1}, stms::Array{BankStatement, 1})\n\nread_bank_statements(path::String) = begin\n    # read the CSV file containing bank statements\n    df = CSV.read(path) # returns a DataFrame\n\n    # return an array with BankStatement's\n    # row[1] is the first value of row, row[2] the second value, etc.\n    return [BankStatement(row[1], row[2], row[3], row[4]) for row in eachrow(df)]\nend # read_bank_statements\n\nretrieve_unpaid_invoices(path)::Array{UnpaidInvoice, 1} = begin\n    # connect to db\n    db = connect(path)\n\n    # retrieve unpaid invoices as dataframe\n    unpaid_records = retrieve(db, string(UNPAID))\n\n    # convert the dataframe to an array with UnpaidInvoice's.\n    # row is an array with one element, which is an array.\n    # row[1] is the the content of the element, the UnpaidInvoice.\n    unpaid_invoices = [row[1] for row in eachrow(unpaid_records.item)]\n\n    # return the array with UnpaidInvoice's\n    return unpaid_invoices\nend # retrieve_unpaid_invoices","category":"page"},{"location":"chapter4/#db.jl-1","page":"4 - Implementing the design","title":"db.jl","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"A microservice is responsible for his data. If we also see a module as an independent component, the same argument would apply. For the Invoicing module, these are the UnpaidInvoice and PaidInvoice objects.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"The db.jl page is based on SQLite.jl module. It translates a data structure into a row in a table whose column names match the argument names of the function. The store method performs this action.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Sometimes you want to save a data structure in a single cell, possibly with additional information. We use the data structure DatabaseItem to achieve this. The column item contains the data structure in the serialized form. Use the archive method for this purpose.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Reading rows results in a DataFrame. It is similar to a spreadsheet where you use column names. If we retrieve the data from a table, it has the advantage of reading the column item of the DataFrame results in an array.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"# db.jl\n\nusing SQLite\n\n# Database item\nstruct DatabaseItem{T}\n   time::Float64\n   agent::String\n   action::String\n   key::String\n   item::T\nend # DatabaseItem\n\n# createDatabaseItem - internal method\nconst agent = \"AB9F\"\ncreateDatabaseItem(item::Any; agent=agent, action=\"CREATE\") = DatabaseItem(time(), agent, action, item.id, item)\n\n# Connect with PATH_CSV\nconnect(path::String)::SQLite.DB = SQLite.DB(path)\n\n# connect to in-memory database\nconnect()::SQLite.DB = SQLite.DB()\n\n# archive an item as DatabaseItem\narchive(db, table::String, items::Array{T, 1} where {T <: Any}) = begin\n   # save items\n   dbi = [ createDatabaseItem( i ; action=\"CREATE\" ) for i in items]\n   # return as dataframe\n   DataFrame( dbi ) |> SQLite.load!(db, table)\nend # archive\n\n#store the fields of an item\nstore(db, table::String, items::Array{T, 1} where {T <: Any}) = begin\n   DataFrame( items ) |> SQLite.load!(db, table)\nend # store\n\n# retrieve all item from a table\nretrieve(db, table::String)::DataFrame = SQLite.Query( db, \"select * from $table\") |> DataFrame\n\n# retrieve item form a table based on a sql condition\nretrieve(db, table::String, condition::String )::DataFrame = SQLite.Query( db, \"select * from $table where $condition\")  |> DataFrame\n\n# run a custom function\nrunfunct(funct, x, y, z) = funct(x, y, z)","category":"page"},{"location":"chapter4/#Exercice-4.2-1","page":"4 - Implementing the design","title":"Exercice 4.2","text":"","category":"section"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"To save time we clone my Invoicing repository from GitHub.","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"Goto your base folder.\nRun thee command: git clone https://github.com/rbontekoe/AppliInvoicing.jl.git\nGoto the folder AppliInvoicing.jl: cd AppliInvoicing.jl\nStart Juno: atom .\nStart Julia.\nGoto the package manager: ]\nActivate the local environment (and don't forget the point .): activate .\nOpen the page test.jl.\nUse Shit-Enter to step door your code. You will see:","category":"page"},{"location":"chapter4/#","page":"4 - Implementing the design","title":"4 - Implementing the design","text":"[ Info: 2020-02-04T12:02:13.613 - Test program started.\n[ Info: The database test_invoicing.sqlite will be removed permanently by the last two statements of this page.\n[ Info: 2020-02-04T12:02:20.128 - Orders received.\n[ Info: 2020-02-04T12:02:23.586 - Unpaid invoices created.\n[ Info: 2020-02-04T12:02:27.884 - Journal entries for unpaid invoices created.\n[ Info: 2020-02-04T12:02:34.27 - Get bankstatement entries for testing.\n[ Info: 2020-02-04T12:02:35.278 - Unpaid invoices retrieved from database.\n[ Info: 2020-02-04T12:02:35.906 - Journal entries for paid invoices created.","category":"page"},{"location":"appendix/#Appendix-1","page":"Appendix","title":"Appendix","text":"","category":"section"},{"location":"appendix/#Introduction-1","page":"Appendix","title":"Introduction","text":"","category":"section"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"I have a Windows 10 laptop with Ubuntu 18.04 installed on a separate disk. I start my machine form this disk.","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"All instalation instructions in this course are based on Ubuntu. Whenever possible I like to create the course environment in a Docker container, for the instructor and for the students.","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"In the course setup I use my machine as IJulia Notebook server.","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Ideas are from Andre Ferrari","category":"page"},{"location":"appendix/#Install-Julia-1","page":"Appendix","title":"Install Julia","text":"","category":"section"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Your computer OS is Ubuntu 18.04.","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"|Step        | Action      | Comment | |:––––– | :––––– |:––––– |","category":"page"},{"location":"appendix/#Install-Docker-1","page":"Appendix","title":"Install Docker","text":"","category":"section"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Your computer OS is Ubuntu 18.04.","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"See: How To Install Docker On Ubuntu 18.04 Bionic Beaver","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Step Action Comment\n1 sudo apt-get update Update Software Repositories.\n2 sudo apt-get remove docker docker-engine docker.io Uninstall Old Versions of Docker\n3 sudo apt install docker.io Install Docker\n4 sudo systemctl start docker Start and Automate Docker\n5 sudo systemctl enable docker \n6 docker –version Check Docker Version","category":"page"},{"location":"appendix/#Dockerfile-1","page":"Appendix","title":"Dockerfile","text":"","category":"section"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Your computer OS is Ubuntu 18.04.\nYou have installed Dockerversion version 0.18.0 or higher.","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"If you have installed Docker, you can create a Docker Image from a Dockerfile. From an image you can create Docker containers.","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"FROM \"jupyter/minimal-notebook\"\n\nUSER root\n\nENV JULIA_VERSION=1.1.0\n\nRUN mkdir /opt/julia-${JULIA_VERSION} && \\\n    cd /tmp && \\\n    wget -q https://julialang-s3.julialang.org/bin/linux/x64/`echo ${JULIA_VERSION} | cut -d. -f 1,2`/julia-${JULIA_VERSION}-linux-x86_64.tar.gz && \\\n    tar xzf julia-${JULIA_VERSION}-linux-x86_64.tar.gz -C /opt/julia-${JULIA_VERSION} --strip-components=1 && \\\n    rm /tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz\n\nRUN ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia\n\nUSER $NB_UID\n\n# Add packages and precompile\n\nRUN julia -e 'import Pkg; Pkg.update()' && \\\n    julia -e 'import Pkg; Pkg.add(\"Plots\"); using Plots' && \\\n    # julia -e 'import Pkg; Pkg.add(\"PlotlyJS\"); using PlotlyJS' && \\\n    julia -e 'import Pkg; Pkg.add(\"Distributions\"); using Distributions' && \\\n    julia -e 'import Pkg; Pkg.add(\"Optim\"); using Optim' && \\\n    julia -e 'import Pkg; Pkg.add(\"StatsPlots\"); using StatsPlots' && \\\n    julia -e 'import Pkg; Pkg.add(\"IJulia\"); using IJulia' && \\\n    fix-permissions /home/$NB_USER","category":"page"},{"location":"appendix/#Install-IJulia-1","page":"Appendix","title":"Install IJulia","text":"","category":"section"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Prerequisites","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Your computer OS is Ubuntu 18.04.\nYou have installed Dockerversion version 0.18.0 or higher.","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"note: Note\nThe instruction are based on Ubuntu 18.04. We use the command line in a terminal window.First check whether Docker is installed on your system, by typing docker --version. If the command docker is not recognized, install Docker.","category":"page"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Step Action Comment\n1 Open a terminal window on Ubuntu $ is the prompt of your OS.\n2 $ mkdir work Create the folder work. Optionally, create sub-directories with the names of your students.\n3 $ mkdir julia Create another directory `julia'.\n4 $ cd julia Goto the directory julia.\n5 Copy the code of the section Dockerfile to the clipboard \n6 $ nano Dockerfile Open the text editor nano.\n7 Ctrl-Shift-V Paste the text on the clipboard into the text editor.\n8 Ctrl-O Save the Dockerfile.\n9 Ctrl-X Exit nano\n10 $ ls list the content of the directory julia.\n11 $ cat Dockerfile Display the content of the Dockerfile.\n12 $ docker build -t julia-image . Create a Docker IJulia image. The name of the image is julia-image.\n13 $ docker run -v ~/work:/home/jovjan/work -p 8888:8888 --name julia julia-image Create a Docker container, and the IJulia Notebook server starts.\n14 Ctrl-C Stop the server.","category":"page"},{"location":"appendix/#Using-IJulia-1","page":"Appendix","title":"Using IJulia","text":"","category":"section"},{"location":"appendix/#Instructor-1","page":"Appendix","title":"Instructor","text":"","category":"section"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Step Action/Response Comment\n1 $ docker start julia Start the IJulia.\n2 $ docker exec -it julia bash Start the Docker client.\n3 jovyan@40f8c3bcf0c1:~$ jupyter notebook list Display the token.\n jovyan@40f8c3bcf0c1:~$ jupyter notebook list Currently running servers: http://0.0.0.0:8888/?token=f394613a12c103a2de92e70aa34715b2183d58e3d5580a2e :: /home/jovyan \n4 Select the token In this case: f394613a12c103a2de92e70aa34715b2183d58e3d5580a2e.\n5 Ctrl-Shift-C Copy the token to the clipboard.\n6 Store the key somewhere, so you can email it to your students. \n7 $ Ctrl-D Exit Docker client.","category":"page"},{"location":"appendix/#Important-Docker-commands-1","page":"Appendix","title":"Important Docker commands","text":"","category":"section"},{"location":"appendix/#","page":"Appendix","title":"Appendix","text":"Action Comment\ndocker images Display all Docker Images.\ndocker ps Display all running containers.\ndocker ps - a Display all containers.\ndocker start <name or id> E.g docker start julia.\ndocker exec -it <name or id> <command> E.g docker exec -it julia bash.\ndocker exec -it <name or id> <command> E.g docker exec -it julia julia.\nCtrl-D Exit the container\ndocker stop <name or id> E.g docker stop julia.\ndocker rm -f <name or id> Delete a container.\ndocker rmi <image id> Delete a image.","category":"page"},{"location":"chapter12/#.-Running-functions-remote-1","page":"12 - Running functions remote","title":"12. Running functions remote","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Under development!","category":"page"},{"location":"chapter12/#What-you-will-learn-1","page":"12 - Running functions remote","title":"What you will learn","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Pages = [\"chapter12.md\"]","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"In lesson 9, Creating SSH enabled Containers, we created two containers: test_sshd and test_sshd2. In this chapter, we learn how to run a function in a remote container test_sshd2. Before we use the model we created in earlier lessons, you will test the containers with the package RbO.jl.","category":"page"},{"location":"chapter12/#Activity-1:-1","page":"12 - Running functions remote","title":"Activity 1:","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"You start the two Docker containers, test_sshd, and test_sshd2. We need to know their Docker IP-addresses. With the command ssh rob@<ip-address>, we enter the test_sshd container. Within this container, we generate a process id bound to the IP-address of test_ssh2.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"We create the file main.jl, which contains the base code for container-container communication.","category":"page"},{"location":"chapter12/#Activities-2a-and-2b:-1","page":"12 - Running functions remote","title":"Activities 2a and 2b:","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Next, we use the example code to create a subscriber based on a name. We prefer to do the test with AppliGate's module RbO.jl. In chapter 12, you will use your modules.","category":"page"},{"location":"chapter12/#Activity-3:-1","page":"12 - Running functions remote","title":"Activity 3:","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"You learn to write a function that can run remotely, and that saves a subscriber in an SQLite database on the container test_sshd2.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#Activity-1:-Start-the-Julia-1.3.0-containers-1","page":"12 - Running functions remote","title":"Activity 1: Start the Julia 1.3.0 containers","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Prerequisites:","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Docker is installed on your computer.\nYou have the two containers test_sshd and test_sshd2 created in chapter 9, Create the Container.\nBoth containers are SSH enabled.\nYou have a Internet connection to download the RbO.jl module.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Steps:","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Start both containers and check their Docker internal IP-address.\nUse SSH to connect from testsshd to testsshd2 and install RbO.jl in both containers.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#Step-1-Start-both-containers-and-check-their-Docker-internal-IP-address-1","page":"12 - Running functions remote","title":"Step 1 - Start both containers and check their Docker internal IP-address","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Step Action Comment\n1 $ docker start test_sshd \n2 $ docker start test_sshd2 \n3 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd e.g. 172.17.0.2\n3 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd2 e.g. 172.17.0.3","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#Step-2-Use-SSH-to-connect-from-test_sshd-to-test_sshd2-and-install-RbO.jl-1","page":"12 - Running functions remote","title":"Step 2 - Use SSH to connect from test_sshd to test_sshd2 and install RbO.jl","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Install RbO in both containers, Example of adding the module","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Step Action Comment\n1 $ ssh rob@172.17.0.2 Enter the container test_sshd.\n2 $ ssh rob@172.17.0.3 Enter the container test_sshd3.\n3 $ julia Start Julia.\n4 julia> ] Go to the package manager.\n5 pkg> add https://github.com/rbontekoe/RbO.jl Install RbO.jl.\n6 Ctrl-C Return to REPL prompt.\n7 Ctrl-D Leave Julia.\n8 Ctrl-D Leave the container test_sshd2.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"note: Note\nIf your container is running on a remote machine, you have to use the ip-address of the remote machine and the exported port of the container to connect to.$ docker start test_sshd # start the container test_sshd$ docker port test_sshd # display the port, e.g. 22/tcp -> 0.0.0.0:32768$ ssh 192.168.xxx.xxx -p 32768 # connect to the container on remote machine","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#Activity-2a:-Start-the-two-containers-and-create-main.jl-1","page":"12 - Running functions remote","title":"Activity 2a: Start the two containers and create main.jl","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Prerequisites:","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Docker is installed on your computer.\nYou have the two containers testsshd and testsshd2 created in Chapter 9, Create the Container.\nBoth containers are SSH-enabled.\nJulia is installed in the directory julia on the containers.\nThe RbO.jl package is installed in both containers.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Steps","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Start the container test_sshd and create main.jl with nano.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#.-Start-the-container-test_sshd-and-test_sshd2-1","page":"12 - Running functions remote","title":"1. Start the container test_sshd and test_sshd2","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Step Action Comment\n1 $ docker start test_sshd Start the first container.\n2 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd Displays docker address, eg, 172.17.0.2.\n3 Take a note of the ip-address of test_sshd \n4 $ docker start test_sshd2 Start the second container.\n5 Take a note of the ip-address of test_sshd2 \n6 $ ssh rob@172.17.0.2 Use the ip-address step 2.\n7 $ julia Start Julia, and continue at step 8 of Activity 2: Test the code","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#Example-test-code-1","page":"12 - Running functions remote","title":"Example test code","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"julia> using Distributed\n\njulia> d = Dict([]) # empty directory for pids, used by the calling container\nDict{Any,Any} with 0 entries\n\njulia> addprocs([(\"rob@172.17.0.3\", 1)])\n\njulia> d[\"test_sshd2\"] = last(workers())\n\njulia> @everywhere using RbO\n\njulia> @everywhere f1(x) = createSubscriber(x)\n\njulia> s1 = remotecall_fetch(f1, d[\"test_sshd2\"], \"Daisy\")\n","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#Activity-2b:-Test-the-code-1","page":"12 - Running functions remote","title":"Activity 2b: Test the code","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Prerequisites:","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Actitvity 1","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Step Action Comment\n8 Copy all the Test code example code to the clipboard, including the julia prompt and the response \n9 Return to the container \n10 Ctrl-Shfi-V Paste the text on the clipboard in the Julia REPL.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"The result should look like the next example:","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"julia> s1 = remotecall_fetch(f1, d[\"test_sshd2\"], \"Daisy\")\nSubscriber(\"884704875723870469\", \"Daisy\", \"\", MEAN_CALCULATOR)","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#Activity-3:-Run-a-function-in-the-remote-container-1","page":"12 - Running functions remote","title":"Activity 3: Run a function in the remote container","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Create and save a subscriber in the container test_sshd2. Then display all saved subscribers from a table.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Prerequisites:","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Activity 1\nActivity 2\nThe package SQLite.jl is installed in both containers.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Steps:","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Install SQLite.jl\nTry the example code\nUse the RbO.jl documentation","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#.-Install-SQLite.jl-1","page":"12 - Running functions remote","title":"1. Install SQLite.jl","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Step Action Comment\n1 Enter test_sshd and start Julia \n2 Go to the package manager \n3 pkg > add SQLite ","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#.-Try-the-example-code-1","page":"12 - Running functions remote","title":"2. Try the example code","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Try the code below.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"\nusing Distributed\n\nd = Dict([])\n\naddprocs([(\"rob@172.17.0.3\", 1)])\n\nd[\"test_sshd2\"] = last(workers())\n\n@everywhere using RbO\n\n# define a new function to create a new subscriber and save it in a database\n@everywhere f2(x) = begin\n  \ts = createSubscriber(x) # create a subscriber\n\tdb = connect(\"./rbo.sqlite\") # connect to database\n\tcreate(db, \"subscribers\", [s]) # save subscriber in database\nend\n\nremotecall_fetch(f2, 2, \"Mickey\")\n\n# define a new function for displaying all subscribers\n@everywhere f3(x) = begin\n   db = connect(\"./rbo.sqlite\") # connect to database\n   gather(db, x) # list all items in table x\nend\n\n# Get list of subscrobers\nremotecall_fetch(f3, 2, \"subscribers\")\n\n# Remove process\nrmprocs(d[\"test_sshd2\"])\n\n# Remove key from dictionary\ndelete!(d, \"test_sshd2\")\n","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"","category":"page"},{"location":"chapter12/#.-Use-the-RbO.jl-documentation-1","page":"12 - Running functions remote","title":"3. Use the RbO.jl documentation","text":"","category":"section"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Use the documentation to do the next steps.","category":"page"},{"location":"chapter12/#","page":"12 - Running functions remote","title":"12 - Running functions remote","text":"Step Action Comment\n1 Use the command connect to create a link to the on-disk database rbo.sqlite \n2 Use the command 'gather' to retieve data from the SQL table subscribers ","category":"page"},{"location":"chapter6/#.-Testing-the-application-1","page":"6 - Testing the application","title":"6. Testing the application","text":"","category":"section"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter6/#What-you-will-learn-1","page":"6 - Testing the application","title":"What you will learn","text":"","category":"section"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"Pages = [\"chapter6.md\"]","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"You learn to use Julia Channel's to transfer data between the tasks. When started, a task receives a general channel where we put for the result. The dispatcher reads data from the channel and pushes it to the relevant private channel of the task. We let the methods run remotely, which means on another core or machine. Next, we start a function to retrieve data. The job pushes the returned data to the general channel, and the dispatcher decides again.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"Application set-up","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"                         +-------------+\n                         |    Master   |\n                         +-------------+\n                          BankStatement¹\n                                ¦\n                                ↓\n    ----------------------------------------------------- rx¹\n                   ↑⁴                    ↑⁴            ↓\n                   ¦                     ¦             ◊ Dispatcher²\n          ↙        ¦            ↙        ¦            ↙\n      --- tx³      ¦        --- tx³      ¦        --- tx³\n       ¦           ¦       Order,        ¦         ¦\n    \"START\"        ¦   BankStatement     ¦    JournalEntry\n       ¦           ¦         ¦           ¦         ¦\n       ↓         Order       ↓      JournalEntry   ↓\n      +--------------+      +--------------+      +--------------+\n      |    Sales     |      |  Invoicing   |      | GeneralLedger|    Workers\n      +--------------+      +--------------+      +--------------+\n↘","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"¹ rx, the channel that receives the output from the modules. The Master creates rx. The Master also generate the test data for the channel: Array{BankStatement, 1}.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"² Dispatcher, a job running in the Master, takes an object from rx and pushes it to the relevant tx channel.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"³ tx is a task bounded channel. The task takes the entity from his channel and processes it remotely.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"⁴ The task pushes the output, Array{Order, 1} or Array{JournalEntry, 1} in this diagram, to the rx channel.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"See: test_remote_channels.jl","category":"page"},{"location":"chapter6/#Using-Channels-1","page":"6 - Testing the application","title":"Using Channels","text":"","category":"section"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"Julia has local and remote channels. In the test\\_remote\\_channel.jl page, we use local channels. The dispatcher creates the general channel rx and instantiates the tasks. Each task returns its channel.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"function dispatcher()\n    rx = Channel(32) # local channel\n\n    tx0 = task_0(rx) # get the orders\n    tx1 = task_1(rx) # process the orders\n    tx2 = task_2(rx) # process the journal entries\n    tx3 = task_3(rx) # process the unpaid invoices","category":"page"},{"location":"chapter6/#The-tasks-1","page":"6 - Testing the application","title":"The tasks","text":"","category":"section"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"Each task creates its private channel tx. Then it starts an asynchronous endless loop. Within the while loop, it tests whether the channel is ready. If it is not ready, which means it doesn't have any data, it enters a wait state. As soon as there is data on the channel, it leaves the wait state.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"If the data has the right data type or value, it runs a function remotely. The task puts the return value of the function on the general channel rx and returns to its wait state until there is more data.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"Because the while loop runs asynchronous, the function can return it local channel to the dispatcher.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"For more information and examples of parallel computing, please see Carsten Bauer's Parallel Computing notebook.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"function task_1(rx)\n    tx = Channel(32)\n    @async while true\n        if isready(tx)\n            orders = take!(tx)\n            @info(\"task_1 received $(typeof(orders))\")\n            if typeof(orders) == Array{AppliSales.Order, 1}\n                @info(\"task_1 will process $(length(orders)) orders remote\")\n                result = @fetch AppliInvoicing.process(PATH_DB, orders)\n                @info(\"task_1 will put $(length(result)) journal entries on rx channel\")\n                put!(rx, result)\n            end\n        else\n            @info(\"task_1 is waiting for data\")\n            wait(tx)\n        end\n    end\n    return tx\nend # test_1","category":"page"},{"location":"chapter6/#Running-code-on-other-cores-1","page":"6 - Testing the application","title":"Running code on other cores","text":"","category":"section"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"Julia uses the master-worker concept. It means that you can let run your code on other cores or even cores on different machines.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"The code of the page test\\_remote\\_channels.jl can partially run on other processor cores.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"To enable parallel and distributed computing use the statement using Distributed.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"See: testremotechannels.jl","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"In this example, it is Julia that decides on which core the code will run.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"np = addprocs(4) #1\n@info(\"number of processes is $(length(np))\")","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"#1 My laptop, a Legion Y520, has a processor with 4 cores.","category":"page"},{"location":"chapter6/#The-dispatcher-1","page":"6 - Testing the application","title":"The dispatcher","text":"","category":"section"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"After initialization the dispather starts an asynchronous endless loop. It takes an entity from the general channel rx. Depending on the data type or value, it starts the relevant task.","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"function dispatcher()\n    rx = Channel(32)\n\n    tx0 = task_0(rx) # get the orders\n    tx1 = task_1(rx) # process the orders\n    tx2 = task_2(rx) # process the journal entries\n    tx3 = task_3(rx) # process the unpaid invoices\n\n    @async while true\n        if isready(rx)\n            value = take!(rx)\n            @info(\"Dispatcher received $(typeof(value))\")\n            if typeof(value) == String && value ==\"START\"\n                put!(tx0, \"START\")\n            elseif typeof(value) == Array{AppliSales.Order, 1}\n                put!(tx1, value)\n            elseif typeof(value) == Array{AppliGeneralLedger.JournalEntry,1}\n                put!(tx2, value)\n            elseif typeof(value) == Array{AppliInvoicing.BankStatement,1}\n                put!(tx3, value)\n            else\n                @warn(\"No task found for type $(typeof(value))\")\n            end\n        else\n            wait(rx)\n        end\n    end\n    return rx\nend # dispatcher","category":"page"},{"location":"chapter6/#Output-1","page":"6 - Testing the application","title":"Output","text":"","category":"section"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"The code on page test\\_remote\\_channel.jl generates the following output:","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"[ Info: Enabled distributed computing\n[ Info: number of processes is 4\n[ Info: Loaded ./api/myfunctions.jl\n[ Info: running test_remote_channel.jl\n[ Info: task_0 is waiting for data\n[ Info: task_1 is waiting for data\n[ Info: task_2 is waiting for data\n[ Info: task_3 is waiting for data\n\n[ Info: Dispatcher started\n[ Info: The Master will start the process and asks for test orders from the AppliSales module\n[ Info: Dispatcher received String\n[ Info: task_0 received String\n[ Info: task_0 will start the process remotely #1\n[ Info: task_0 will put 3 the orders on rx channel\n[ Info: task_0 is waiting for data\n\n[ Info: Dispatcher received Array{AppliSales.Order,1}\n[ Info: task_1 received Array{AppliSales.Order,1}\n[ Info: task_1 will process 3 orders remotely\n[ Info: task_1 will put 3 journal entries on rx channel\n[ Info: task_1 is waiting for data\n\n[ Info: Dispatcher received Array{AppliGeneralLedger.JournalEntry,1}\n[ Info: task_2 received Array{AppliGeneralLedger.JournalEntry,1}\n[ Info: task_2 will process 3 journal entries remotely\n[ Info: task_2 saved 3 journal entries\n[ Info: task_2 is waiting for data\n\n[ Info: Master got 2 bank statements\n[ Info: Master will put 2 bank statements on rx channel\n[ Info: Dispatcher received Array{AppliInvoicing.BankStatement,1}\n[ Info: task_3 received Array{AppliInvoicing.BankStatement,1}\n[ Info: task_3 will match unpaid invoices with bank statements\n[ Info: task_3 will put 2 journal entries on rx channel\n[ Info: task_3 is waiting for data\n\n[ Info: Dispatcher received Array{AppliGeneralLedger.JournalEntry,1}\n[ Info: task_2 received Array{AppliGeneralLedger.JournalEntry,1}\n[ Info: task_2 will process 2 journal entries remotely\n[ Info: task_2 saved 2 journal entries\n[ Info: task_2 is waiting for data\n\n[ Info: Dispatcher received String\n┌ Warning: No task found for type String\n└ @ Main ~/julia-projects/tc/AppliMaster/src/api/myfunctions.jl:130","category":"page"},{"location":"chapter6/#","page":"6 - Testing the application","title":"6 - Testing the application","text":"#1 remotely means: running a task on another process (core).","category":"page"},{"location":"chapter8/#.-Documenting-your-code-1","page":"8 - Documenting the modules","title":"8. Documenting your code","text":"","category":"section"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"Under development!","category":"page"},{"location":"chapter8/#What-you-will-learn-1","page":"8 - Documenting the modules","title":"What you will learn","text":"","category":"section"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"Pages = [\"chapter8.md\"]","category":"page"},{"location":"chapter8/#An-example-1","page":"8 - Documenting the modules","title":"An example","text":"","category":"section"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"You can document your code, which the user can see when one uses Julia's help. Place the whole between three quotation marks, just above a function. The first line starts with four spaces, followed by the syntax of the function. On the next lines, you can tell what it does.","category":"page"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"You can also use an example. Start with # Example with on the next lines the case enclosed between three back-ticks. It can be the code you copied from the REPL.","category":"page"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"Example","category":"page"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"\"\"\"\n    create(order::Order, invoice_id::String)::UnpaidInvoice\n\nCreate an UnpaidInvoice from an AppliSales.Order\n\n# Example\n````jldoctest #1 #2\njulia> using AppliInvoicing\n\njulia> using AppliSales\n\njulia> orders = AppliSales.process()\n\njulia> invnbr = 1000\n\njulia> invoices = [create(order, \"A\" * string(global invnbr += 1)) for order in orders]\n```` #1\n\"\"\"\ncreate(order::Order, invoice_id::String)::UnpaidInvoice = begin\n    meta = MetaInvoice(order.id, order.training.id)\n    header_invoice = Header(\n            invoice_id, order.org.name, order.org.address, order.org.zip, order.org.city, order.org.country, order.order_ref, order.contact_name, order.contact_email)\n    body_invoice = OpentrainingItem(order.training.name, order.training.date, order.training.price, order.students)\n    return UnpaidInvoice(invoice_id, meta, header_invoice, body_invoice)\nend","category":"page"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"#1 - Replace the four back-ticks by three back-ticks.","category":"page"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"#2 - documenter.jl tests the code when it encounters jldoctest.","category":"page"},{"location":"chapter8/#Activity-8.1-Using-Help-1","page":"8 - Documenting the modules","title":"Activity 8.1 - Using Help","text":"","category":"section"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"Step Action Comment\n1 Start Julia \n2 julia> ] Activate Package Manager.\n3 pkg> add https://github.com/rbontekoe/AppliInvoicing.jl Add AppliInvoicing. Use update when you already added the package.\n4 pkg>  Ctrl-C Back to Julia.\n5 julia> using AppliInvoicing \n6 Julia> ? Go to the Help mode.\n7 help?> create Search for the create functions. Julia displays two create methods.","category":"page"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"The first method is create(order::Order, invoice_id::String)::UnpaidInvoice:","category":"page"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"search: create searchsortedlast\n\n  create(order::Order, invoice_id::String)::UnpaidInvoice\n\n  Create an UnpaidInvoice from an AppliSales.Order\n\n  Example\n  ≡≡≡≡≡≡≡≡≡\n\n  julia> using AppliInvoicing\n\n  julia> using AppliSales\n\n  julia> orders = AppliSales.process()\n\n  julia> invnbr = 1000\n\n  julia> invoices = [create(order, \"A\" * string(global invnbr += 1)) for order in orders]\n\n  ───────────────────────────────────────────────────────────────────\n","category":"page"},{"location":"chapter8/#","page":"8 - Documenting the modules","title":"8 - Documenting the modules","text":"Step Action Comment\n8 Select the code under example to the clipboard Including the julia> prompts.\n9 Ctrl-C Copy the code to the clipboard.\n9 julia> Ctrl-V Paste the code at the julia> prompt. Immediately, Julia executes the code.","category":"page"},{"location":"chapter3/#The-design-1","page":"3 - The design","title":"3 - The design","text":"","category":"section"},{"location":"chapter3/#What-you-will-learn-1","page":"3 - The design","title":"What you will learn","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Pages = [\"chapter3.md\"]","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"First, let's look at some terms and definitions. We'll convert the procedure Invoicing into an activity diagram. Using the Onion Architecture pattern, we define the Domain objects and the Julia API-functions. In the Infrastructure layer, we put the functions that interact with the outer world and the inner layers.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"","category":"page"},{"location":"chapter3/#Terms-and-definitions-1","page":"3 - The design","title":"Terms and definitions","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"The points of attention are:","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Procedure,\nDomain-driven design,\nDistributed processing, and\nStyle conventions.","category":"page"},{"location":"chapter3/#Procedure-1","page":"3 - The design","title":"Procedure","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"A procedure is a description of work practice, a workflow. It describes a series of activities or actions in a particular order and interacts with people and machines. Actions make use of resources. Data, a service or a product, is the output of work.","category":"page"},{"location":"chapter3/#Domain-driven-design-1","page":"3 - The design","title":"Domain-driven design","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Each process should be domain-specific. Subject matter experts and users of the domain speak the same language and use the same definitions and synonyms for concepts and objects. It leads to a Domain-driven design paradigm.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"The Onion Architecture lends itself perfectly to the domain-driven design pattern. It divides an application into four areas: core, domain, API, and infrastructure.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"The core consists out of the Julia language constructs and Julia modules. Modules are also called packages.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"The next layer, the domain, defines the domain entities and concepts. Between its elements, there must be coherence. You only use constructs from the core. UnpaidInvoice is an example.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"The next peel is the API. The API consists of Julia functions that operate on the domain elements, and are used to create programs. You only use constructs from the core and the domain.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"create_unpaidinvoice, create_paidinvoice, create_pdf are examples.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"The infrastructure layer is the ultimate peel. With its functions, it communicates with the external world. Adapters overcome mismatches between interfaces. When you write you the code, you use elements from the inner layers.","category":"page"},{"location":"chapter3/#Distributed-processing-1","page":"3 - The design","title":"Distributed processing","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Programs, written in Julia language, also can run on other processor cores. Even in Docker containers on remote machines. Julia uses the master-worker concept. It means that the master executes Julia's functions on workers.","category":"page"},{"location":"chapter3/#Style-conventions-1","page":"3 - The design","title":"Style conventions","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"The article Blue: a Style Guide for Julia describes the style conventions.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"","category":"page"},{"location":"chapter3/#A-procedure-as-a-starting-point-1","page":"3 - The design","title":"A procedure as a starting point","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"In 1994 we were delivering Lotus Notes instructor-led training in the Netherlands. We became ISO-9001 certified one year later. ISO is short for the International Organization for Standardization. A part of ISO is the section procedures.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"A procedure describes a workflow or business process. It specifies the activities to be carried out by people or machines and the resources that are required to produce a result.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"An input triggers a process. Every action creates an output, most of the time, modified information or side-effects such as saving data.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"The example I use in the course is the procedure Invoicing.","category":"page"},{"location":"chapter3/#The-course-example-1","page":"3 - The design","title":"The course example","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"In 1998 we rewrote our procedures as a table. Every row represents an activity or action. Next to the events are the columns with the roles involved with the work. The original procedure:","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Procedure: Invoicing.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Roles: OM = Office Manage, AOM = Assistant Office Manager.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Input: List of orders.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Step Action AOM OM Output Tool Exception\n1 Create an invoice per order R A Created and authorized invoices Order file \n2 Archive a copy of the invoice R  Archived copy Accounts Receivable unpaid \n3 Send the invoice to the customer R I Invoice sent  \n4 Book the invoice R A Booked invoice General ledger \n5 Book the paid invoice R A Paid invoice Bank records, General ledger \n6 Archive the paid invoice R I Archived invoice Accounts Receivable paid \n7 Check unpaid invoices  R List of unpaid invoices to contact customer Note in CRM system ","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"RASCI","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"R = Responsible, the entity who is responsible for the execution of the activity.\nA = Approves, the entity who approves the result before going to the next step.\nS = Supports, the members of the team.\nC = Consults, an entity.\nI = Informed, notify the entity about the result.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Let's see how we can automate the procedure with Julia. We tackle it with a technique of Domain-Driven Design and the Onion architecture.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"","category":"page"},{"location":"chapter3/#The-procedure-as-an-activity-diagram-1","page":"3 - The design","title":"The procedure as an activity diagram","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"The activity diagram represents the workflow. The actions are Julia functions. You can add typed arguments and return values in Julia, noted by a double colon (::) followed by the name of the type. This defines the domain entities, e.g., ::Order, ::UnpaidInvoice.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"⚉ process(::Array{Order)\n    ↓\n    create(::Array{Order}::Array{UnpaidInvoice}\n    ↓\n    send_email(::Array{UnpaidInvoice}) # TODO\n    ↓\n    archive(::Array{UnpaidInvoice})\n    ↓\n    create(::Array{UnpaidInvoice}::Array{JournalEntry}\n    ↓\n    return ::Array{JournalEntry}\n    ↓\n    ◉\n\n⚉ process(::Array{UnpaidInvoice}, ::Array{BankStatement})\n    ↓\n    filter(::Array{UnpaidInvoice}, ::Array{Bankstatement})::Array{PaidInvoice}\n    ↓\n    archive(::Array{PaidInvoice})\n    ↓\n    create(::Array{PaidInvoice})::Array{JournalEntry}\n    ↓\n    return ::Array{JournalEntry}\n    ↓\n    ◉\n\n⚉ process(::Array{UnpaidInvoice}, days::Int) # TODO\n    ↓\n    filter(::Array{UnpaidInvoice, ::Int}::Array{UnpaidInvoiceDue}\n    ↓\n    return ::Array{UnpaidInvoiceDue}\n    ↓\n    ◉","category":"page"},{"location":"chapter3/#The-design-2","page":"3 - The design","title":"The design","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"From the activity diagram we get:","category":"page"},{"location":"chapter3/#Domain-elements-1","page":"3 - The design","title":"Domain elements","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"The domain objects (types) are:","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Domain Types:","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"UnpaidInvoice;\nPaidInvoice;\nUnpaidInvoiceDue;\nMessageType;\nBankStatement.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"External Types","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Sales.Order¹;\nGeneralLedger.JournalEntry².","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"General modules:","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Dates³\nDataFrames³","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"¹ Defined in the module Sales. We iterate on a list of orders that we will create in the test code to simplify the course.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"² Defined in the module GeneralLedger.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"³ Dates and DataFrames modules are a part of Julia. The DataFrame data structure is comparable to a spreadsheet.","category":"page"},{"location":"chapter3/#API-Invoicing-1","page":"3 - The design","title":"API Invoicing","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"The API contains the methods (functions) of the module. The methods use only elements from the core or domain. An overview of we need:","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"create(::Order)::UnpaidInvoice\ncreate(::UnpaidInvoice, ::BankStatement)::PaidInvoice\ncreate(::UnpaidInvoice)::JournalStatement\ncreate(::PaidInvoice)::JournalStatement\ncreate(::UnpaidInvoice, ::Int)::UnpaidInvoiceDue","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"In Julia, you can use the same function name as long as the signature is different, so other types and, or the number of arguments. One calls it multiple dispatch.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"We have defined and created the Order, with the Training, Company, Contact, and Student objects in the test module AppliSales to simplify the course.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Also, we have already created a test module AppliGeneralLedger to make it easier to test the code in this chapter.","category":"page"},{"location":"chapter3/#Methods-of-the-Infrastructure-layer-1","page":"3 - The design","title":"Methods of the Infrastructure layer","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Database:","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"connect(path::String)::SQLite.DB\narchive(db::SQLite.DB, tablename::String, item::Array{Any, 1})\nstore(db::SQLite.DB, tablename::String, data_type::Array{Any, 1})\nretrieve(db::SQLite.DB, tablename::String)::DataFrame\nretrieve(db::SQLite.DB, tablename::String, selection::String)::DataFrame","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"You find the methods in our module AppliSQLite, which we will use in the course. It makes use of the module SQLite.","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"SQLite.jl is a Julia package, You can use it as an on-disk database file, but also as an in-memory database. The last option is ideal for testing.","category":"page"},{"location":"chapter3/#Application-infrastructure-1","page":"3 - The design","title":"Application infrastructure","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"                               +-----------+\n                               | 1. Master |\n                               +-----------+\n                                     ↓\n                                     ◊\n   OpenCourseOrder / BankStatement  ↙ ↘  JournalEntry\n                   +--------------+     +--------------------+\n                   | 2. Invoicing |     | 3. General Ledger  |   Workers\n                   +--------------+     +--------------------+\n                          ↓\n                     JournalEntry","category":"page"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Master - Runs in a container.\nWorker Invoicing - Function, see Activity diagram, runs in a container.\nWorker General Ledger - Dummy, runs on a core.","category":"page"},{"location":"chapter3/#ToDo-1","page":"3 - The design","title":"ToDo","text":"","category":"section"},{"location":"chapter3/#","page":"3 - The design","title":"3 - The design","text":"Thinking of Literate.jl as a package to make PDFs.\nHow to attach a PDF to an email?\nHow to send an email?\nSMTPClient.jl","category":"page"},{"location":"chapter10/#.-Creating-SSH-enabled-Containers-1","page":"10 - Create SSH enabled Containers","title":"10. Creating SSH enabled Containers","text":"","category":"section"},{"location":"chapter10/#What-you-will-learn-1","page":"10 - Create SSH enabled Containers","title":"What you will learn","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Pages = [\"chapter10.md\"]","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"The article Dockerize an SSH service uses Ubuntu 16.04 as the base image. However, Julia 1.0 and higher needs Ubuntu 18.04, so we have changed the Dockerfile. This version of Ubuntu also requires that you create a user with administrator rights when you use SSH to connect.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"You also learn to install Julia in the container.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"To make use of passwordless connections between containers, you also learn to create SSH keys.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"In the next chapter, we will show you how to create containers on a Raspberry Pi 3B. I have another project running where I communicate with a Raspberry Pi to transfer images to my laptop.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"See also the Pact book Julia 1.0 Programming: Installing Julia from binaries","category":"page"},{"location":"chapter10/#Activity-1-Create-local-SSH-keys-1","page":"10 - Create SSH enabled Containers","title":"Activity 1 - Create local SSH keys","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Prerequisites:","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Your system has Ubuntu 18.04 that runs on an Intel x86 processor.\nYou have started your computer.\nYou haven't created the keys before.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Steps:","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Check previous created keys.\nCreate local SSH keys.","category":"page"},{"location":"chapter10/#.-Check-previous-created-keys-1","page":"10 - Create SSH enabled Containers","title":"1. Check previous created keys","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n1 $ ls -l .ssh ","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Response","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"ls: cannot access '.ssh': No such file or directory","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"You haven't created the key before, go to step 2.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"total 16\n-rw-r--r-- 1 root root  107 nov 13 10:57 config\n-rw------- 1 rob  rob  3247 okt 16 15:04 id_rsa\n-rw-r--r-- 1 rob  rob   748 okt 16 15:04 id_rsa.pub\n-rw-r--r-- 1 rob  rob   444 dec  3 14:59 known_hosts","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"You have created the keys before, no further action is required. The file id_rsa.pub contains your public key. Later on, we will create a copy of it in the SSH enabled container.","category":"page"},{"location":"chapter10/#.-Create-local-SSH-keys-on-your-computer-1","page":"10 - Create SSH enabled Containers","title":"2. Create local SSH keys on your computer","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n1 $ sudo apt-get update \n2 $ sudo apt-get install openssh-client Install ssh client on Ubuntu.\n3 $ ls -al ~/.ssh/id_*.pub View old keys.\n4 $ ssh-keygen -t rsa -b 4096 -C \"your_email@domain.com\" Generate the key.\n5 $ ls ~/.ssh/id_* View your new keys.","category":"page"},{"location":"chapter10/#Do-we-need-to-do-this-in-the-ssh-container?-1","page":"10 - Create SSH enabled Containers","title":"Do we need to do this in the ssh container?","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n6 $ chmod 700 ~/.ssh Change right the folder .ssh\n7 $ chmod 600 ~/.ssh/authorized_keys Change right of the file authorized_keys","category":"page"},{"location":"chapter10/#Activity-2-Create-the-Container-1","page":"10 - Create SSH enabled Containers","title":"Activity 2 - Create the Container","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Prerequisites:","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Your system has Ubuntu 18.04 that runs on an Intel x86 processor.\nYou have started your computer.\nYou have installed Docker (See appendix).","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Steps:","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Create a Dockerfile in the folder test_sshd.\nCreate a Docker image eg_ssdh and the container test_sshd.\nCreate a user rob, who has administrator rights.","category":"page"},{"location":"chapter10/#The-Dockerfile-1","page":"10 - Create SSH enabled Containers","title":"The Dockerfile","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"FROM ubuntu:18.04\n\nRUN apt-get update && apt-get install -y openssh-server\nRUN mkdir /var/run/sshd\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nENV NOTVISIBLE \"in users profile\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\n\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]","category":"page"},{"location":"chapter10/#.-Create-a-Dockerfile-in-the-folder-test_ssh-1","page":"10 - Create SSH enabled Containers","title":"1. Create a Dockerfile in the folder test_ssh","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n2 $ sudo mkdir test-ssh Create a new folder.\n3 $ cd test-ssh Go to the folder.\n4 Select the content of the Dockerfile above \n5 Ctrl-C Copy the selected text to the clipboard.\n6 $ nano Dockerfile Create a new empty file.\n7 Shift-Ctrl-V Paste text from the clipboard into nano.\n8 Ctrl-O <Enter> Save the file.\n9 Ctrl-X Exit nano.","category":"page"},{"location":"chapter10/#.-Create-a-Docker-image-eg_sshd-and-the-container-test_sshd-1","page":"10 - Create SSH enabled Containers","title":"2. Create a Docker image eg_sshd and the container test_sshd","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n1 $ docker build -t eg_sshd . Create a Docker image from the Dockerfile\n2 $ docker run -d -P --name test_sshd eg_sshd Create a container\n3 $ docker port test_sshd 22 Find port number\n 0.0.0.0:32768 Response\n4 $ docker exec -it test_sshd bash Enter the container\n5 Ctrl-D Leave the container.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"sudo docker run -d -P -v /home/rob/test-ssh:/home/rob/.ssh –name testsshd egsshd sudo chmod 777 /home/rob/test-ssh/","category":"page"},{"location":"chapter10/#.-Create-a-user-rob,-who-has-administrator-rights-1","page":"10 - Create SSH enabled Containers","title":"3. Create a user rob, who has administrator rights","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n1 $ docker exec -it test_sshd bash Enter the container\n2 # adduser rob ","category":"page"},{"location":"chapter10/#Response-1","page":"10 - Create SSH enabled Containers","title":"Response","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Adding user `rob' ...\nAdding new group `rob' (1000) ...\nAdding new user `rob' (1000) with group `rob' ...\nThe home directory `/home/rob' already exists.  Not copying from `/etc/skel'.\nadduser: Warning: The home directory `/home/rob' does not belong to the user you are currently creating.\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully\nChanging the user information for rob\nEnter the new value, or press ENTER for the default\n\tFull Name []: Rob Bontekoe\n\tRoom Number []:\n\tWork Phone []:\n\tHome Phone []:\n\tOther []:\nIs the information correct? [Y/n] Y","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"note: Note\nYou are asked to give the user rob a password. The password you will use in the future for the SSH connection to the container, so write it down. You need it the first time when you want to enable passwordless communication. From Ubuntu 18.04 on, you don't know the roots' password anymore. That is the reason we had to create a user with administrator rights for SSH connections.","category":"page"},{"location":"chapter10/#Next-steps-1","page":"10 - Create SSH enabled Containers","title":"Next steps","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n3 # usermod -aG sudo rob Give user administrator rights.\n4 # apt-get install sudo You act as root when you precede your commands with sudo. It is not installed yet in this minimized container.\n5 # su rob Switch to the user rob\n To run a command as administrator (user \"root\"), use \"sudo <command>\". \\nSee \"man sudo_root\" for details. \n5 $ sudo -i Back as root user\n6 Ctrl-D Leave the container.","category":"page"},{"location":"chapter10/#Activity-3-Install-Julia-1","page":"10 - Create SSH enabled Containers","title":"Activity 3 - Install Julia","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Prerequisites:","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Your system has Ubuntu 18.04 running on the Intel x86 processor.\nThe container test_sshd exists.\nThe container has the user rob, who has administrators (sudo) rights.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Activity:","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Download the Julia binary and copy it to the container.\nInstall Julia and test the installation.\nCreate a symbolic link to start Julia from everywhere.","category":"page"},{"location":"chapter10/#.-Download-the-Julia-binary-and-copy-it-to-the-container-1","page":"10 - Create SSH enabled Containers","title":"1. Download the Julia binary and copy it to the container","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n1 Download Julia eg. julia-1.3.0-linux-x86_64.tar.gz\n2 $ docker ps -a Check whether container test_ssh exists.\n2 $ docker start test_sshd Start the container.\n3 $ docker cp julia-1.3.0-linux-x86_64.tar.gz test_sshd:/home/rob Copy the downloaded file to the container.\n4 $ docker exec -it test_sshd bash Enter the conatiner.","category":"page"},{"location":"chapter10/#Next-steps-2","page":"10 - Create SSH enabled Containers","title":"Next steps","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n5 $ su rob Switch to user rob.\n6 $ cd ~ Go to home directory.\n7 $ ls You see the file julia-1.3.0-linux-x86_64.tar.gz","category":"page"},{"location":"chapter10/#.-Install-Julia-and-test-the-installation-1","page":"10 - Create SSH enabled Containers","title":"2. Install Julia and test the installation","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n5 $ mkdir julia Create folder julia. OS asks for yur password.\n6 $ mv julia-1.3.0-linux-x86_64.tar.gz julia Move file to folder.\n7 $ cd julia Enter folder\n8 $ tar -zxvf julia-1.3.0-linux-x86_64.tar.gz Extract the file.\n9 $ ls List the content of the folder.\n julia-1.3.0  julia-1.3.0-linux-x86_64.tar.gz \n10 $ cd julia-1.3.0/bin/ We will test Julia.\n11 $ sudo ./julia Start Julia.","category":"page"},{"location":"chapter10/#Response-2","page":"10 - Create SSH enabled Containers","title":"Response","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.3.0 (2019-11-26)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia>","category":"page"},{"location":"chapter10/#.-Create-a-symbolic-link-to-start-Julia-from-anywhere-1","page":"10 - Create SSH enabled Containers","title":"3. Create a symbolic link to start Julia from anywhere","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n12 Ctrl-D Leave Julia.\n13 cd ~ To home directory.\n14 $ sudo ln -s /home/rob/julia/julia-1.3.0/bin/julia /usr/local/bin/julia Create link.\n15 $ julia Start Julia.","category":"page"},{"location":"chapter10/#Activity-4-Test-the-container.-1","page":"10 - Create SSH enabled Containers","title":"Activity 4 - Test the container.","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Prerequisites:","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"You have an SSH enabled container.\nYou have created the SSH authorized_keys See.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Steps:","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Copy your public key to the container.\nTest the SSH connection with the container.","category":"page"},{"location":"chapter10/#.-Copy-your-public-key-to-the-container-1","page":"10 - Create SSH enabled Containers","title":"1. Copy your public key to the container","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n1 $ docker ps Check whether the container is already running.\n2 $ docker start test_sshd Start the container if not running.\n3 $ docker port test_sshd 22 Find the port number\n 0.0.0.0:32768 Port number is 32768.\n4 $ ssh-copy-id  rob@localhost -p 32769 Copy file to container\n5 $ ssh rob@localhost -p 32768 Connect to the container.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Enter y, and continue.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"The authenticity of host '[localhost]:32768 ([127.0.0.1]:32768)' can't be established.\nECDSA key fingerprint is SHA256:lix3DGk69mhTnPlb0WE70syuDWVh59XL3az/4UJDInc.\nAre you sure you want to continue connecting (yes/no)? yes","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Type your password.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nrob@localhost's password:","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Then some instructions.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Number of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh -p '32769' 'rob@localhost'\"\nand check to make sure that only the key(s) you wanted were added","category":"page"},{"location":"chapter10/#.-Test-the-SSH-connection-with-the-container.-1","page":"10 - Create SSH enabled Containers","title":"2. Test the SSH connection with the container.","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Step Action Comment\n1 ssh rob@localhost -p 32768 ","category":"page"},{"location":"chapter10/#Response-3","page":"10 - Create SSH enabled Containers","title":"Response","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 5.0.0-37-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\nThis system has been minimized by removing packages and content that are\nnot required on a system that users do not log into.\n\nTo restore this content, you can run the 'unminimize' command.\nLast login: Thu Dec  5 12:16:21 2019 from 172.17.0.1\nrob@13304c03391d:~$","category":"page"},{"location":"chapter10/#Exercise-1","page":"10 - Create SSH enabled Containers","title":"Exercise","text":"","category":"section"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"Create a second container test_sshd2:","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"You don't have to create the keys again!\nUse the same image eg_sshd.\nCheck the port number of test_sshd2.\nName of the administrative user can be kept the same: rob.","category":"page"},{"location":"chapter10/#","page":"10 - Create SSH enabled Containers","title":"10 - Create SSH enabled Containers","text":"We will use both containers in chapter 11.","category":"page"},{"location":"chapter20/#.-Using-Remote-Channels-(old-stuff)-1","page":"20 - Using Remote Channels (old stuff)","title":"20. Using Remote Channels (old stuff)","text":"","category":"section"},{"location":"chapter20/#What-you-will-learn-1","page":"20 - Using Remote Channels (old stuff)","title":"What you will learn","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Pages = [\"chapter11.md\"]","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"In lesson 9, Creating SSH enabled Containers, we created two containers: test_sshd and test_sshd2. In this chapter, we learn how to run a function in a remote container test_sshd2. Before we use the model we created in earlier lessons, you will test the containers with the package RbO.jl.","category":"page"},{"location":"chapter20/#Activity-1:-1","page":"20 - Using Remote Channels (old stuff)","title":"Activity 1:","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"You start the two Docker containers, test_sshd, and test_sshd2. We need to know their Docker IP-addresses. With the command ssh rob@<ip-address>, we enter the test_sshd container. Within this container, we generate a process id bound to the IP-address of test_ssh2.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"We create the file main.jl, which contains the base code for container-container communication.","category":"page"},{"location":"chapter20/#Activities-2a-and-2b:-1","page":"20 - Using Remote Channels (old stuff)","title":"Activities 2a and 2b:","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Next, we use the example code to create a subscriber based on a name. We prefer to do the test with AppliGate's module RbO.jl. In chapter 12, you will use your modules.","category":"page"},{"location":"chapter20/#Activity-3:-1","page":"20 - Using Remote Channels (old stuff)","title":"Activity 3:","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"You learn to write a function that can run remotely, and that saves a subscriber in an SQLite database on the container test_sshd2.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#Activity-1:-Start-the-Julia-1.3.0-containers-1","page":"20 - Using Remote Channels (old stuff)","title":"Activity 1: Start the Julia 1.3.0 containers","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Prerequisites:","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Docker is installed on your computer.\nYou have the two containers test_sshd and test_sshd2 created in chapter 9, Create the Container.\nBoth containers are SSH enabled.\nYou have a Internet connection to download the RbO.jl module.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Steps:","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Start both containers and check their Docker internal IP-address.\nUse SSH to connect from testsshd to testsshd2 and install RbO.jl in both containers.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#Step-1-Start-both-containers-and-check-their-Docker-internal-IP-address-1","page":"20 - Using Remote Channels (old stuff)","title":"Step 1 - Start both containers and check their Docker internal IP-address","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Step Action Comment\n1 $ docker start test_sshd \n2 $ docker start test_sshd2 \n3 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd e.g. 172.17.0.2\n3 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd2 e.g. 172.17.0.3","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#Step-2-Use-SSH-to-connect-from-test_sshd-to-test_sshd2-and-install-RbO.jl-1","page":"20 - Using Remote Channels (old stuff)","title":"Step 2 - Use SSH to connect from test_sshd to test_sshd2 and install RbO.jl","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Install RbO in both containers, Example of adding the module","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Step Action Comment\n1 $ ssh rob@172.17.0.2 Enter the container test_sshd.\n2 $ ssh rob@172.17.0.3 Enter the container test_sshd3.\n3 $ julia Start Julia.\n4 julia> ] Go to the package manager.\n5 pkg> add https://github.com/rbontekoe/RbO.jl Install RbO.jl.\n6 Ctrl-C Return to REPL prompt.\n7 Ctrl-D Leave Julia.\n8 Ctrl-D Leave the container test_sshd2.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"note: Note\nIf your container is running on a remote machine, you have to use the ip-address of the remote machine and the exported port of the container to connect to.$ docker start test_sshd # start the container test_sshd$ docker port test_sshd # display the port, e.g. 22/tcp -> 0.0.0.0:32768$ ssh 192.168.xxx.xxx -p 32768 # connect to the container on remote machine","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#main.jl-1","page":"20 - Using Remote Channels (old stuff)","title":"main.jl","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"We use a function to run code in another container. The function will be called in a while loop. Because we use this construction more often, we pass the function as argument to a function called remote_body. Through the channel you transport the data for the function. We store he code of the remote_body function in the file main.jl.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"note: Note\nMaybe all the stuff can much more easier be accomplished by using:remotecall_fetch(f1, 2, createSubscriber(\"Daisy\"))\nremotecall_fetch(f2, 2, \"subscribers\")\nremotecall_fetch(f3, 4, [\"Gekke Jan\"], \"subscribers\")@everywhere f3(x, y) = begin\n    s = createSubscriber(x)\n    db = connect(\"./rbo.sqlite\")\n    create(db, y, [s])\n    true\nend","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"using Distributed\n\n#=\nThe container that wants to run code on another container initiate this function.It has two arguments:\n- pid, the process id created wi th the addprocs function.\n- funct, to run on the container, or remote machine. funct is in this example a function that accepts only one argument.\n=#\nfunction remote_body(pid::Int, funct)\n    tx = RemoteChannel(() -> Channel(32)) # local transmit channel\n    rx = RemoteChannel(() -> Channel(32)) # local receive channel\n\n    # run the code on the process id that has been passed\n    @async @spawnat pid begin\n        while true\n\t    try\n                if isready(tx) # channel has data\n\n                    # get the data from the tx-channel\n                    value = take!(tx)\n\n                    # execute the code of the function that was passed as argument\n                    result = funct(value)\n\n                    # for test purposes\n                    #@show result\n\n                    # put the result of the function on the rx-channel\n                    put!(rx, result)\n                else\n\n                    # for test purposes\n                    #which_funct = string(funct) * \" on process \" * string(myid()) * \" is waiting for data.\"\n                    #@show which_funct\n\n                    # the code wait until there is data on the tx-channel\n                    wait(tx)\n                end\n\t    catch e\n\t       put!(rx, e)\n\t    end\n        end\n    end\n\n    # return transmit and receive channel, so the calling container can communicate with the called container.\n    tx, rx\n\nend # defined remote_body\n\nd = Dict([]) # empty directory for pids, used by the calling container","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#Activity-2a:-Start-the-two-containers-and-create-main.jl-1","page":"20 - Using Remote Channels (old stuff)","title":"Activity 2a: Start the two containers and create main.jl","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Prerequisites:","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Docker is installed on your computer.\nYou have the two containers testsshd and testsshd2 created in Chapter 9, Create the Container.\nBoth containers are SSH-enabled.\nJulia is installed in the directory julia on the containers.\nThe RbO.jl package is installed in both containers.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Steps","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Start the container test_sshd and create main.jl with nano.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#.-Start-the-container-test_sshd-and-create-main.jl-with-nano.-1","page":"20 - Using Remote Channels (old stuff)","title":"1. Start the container test_sshd and create main.jl with nano.","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Step Action Comment\n1 $ docker start test_sshd Start the first container.\n2 $ docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" test_sshd Displays docker address, eg, 172.17.0.2.\n3 Take a note of the ip-address of test_sshd \n4 $ docker start test_sshd2 Start the second container.\n5 Take a note of the ip-address of test_sshd2 \n6 $ ssh rob@172.17.0.2 Use the ip-address step 2.\n7 Copy the main.jl code to the clipboard. \n8 $ nano main.jl Open a new file.\n9 Ctrl-Shift-V Paste the code form the clipboard.\n10 Ctrl-O Save the file.\n11 Ctrl-X Exit the editor.\n12 $ julia Start Julia, and continue at step 13 of Activity 2: Test the code","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#Example-test-code-1","page":"20 - Using Remote Channels (old stuff)","title":"Example test code","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"julia> include(\"main.jl\")\nDict{Any,Any} with 0 entries\n\njulia> addprocs([(\"rob@172.17.0.3\", 1)])\n1-element Array{Int64,1}:\n 2\n\njulia> d[\"test_sshd2\"] = last(workers())\n2\n\njulia> @everywhere using RbO\n\njulia> tx1, rx1 = remote_body(d[\"test_sshd2\"], createSubscriber)\n(RemoteChannel{Channel{Any}}(1, 1, 7), RemoteChannel{Channel{Any}}(1, 1, 8))\n\njulia> tx2, rx2 = remote_body(d[\"test_sshd2\"], createPublisher)\n(RemoteChannel{Channel{Any}}(1, 1, 10), RemoteChannel{Channel{Any}}(1, 1, 11))\n\njulia> put!(tx1, \"Donald Duck\") # transmit value \"Donald Duck\" to container\nRemoteChannel{Channel{Any}}(1, 1, 7)\n\njulia> put!(tx2, \"The New York Times\")\nRemoteChannel{Channel{Any}}(1, 1, 10)\n\njulia> isready(rx1) ? take!(rx1) : \"\" # receive result\nSubscriber(\"1687381951631187484\", \"Donald Duck\", \"\", MEAN_CALCULATOR)\n\njulia> isready(rx2) ? take!(rx2) : \"\"\nPublisher(\"18206665133840381206\", \"The New York Times\", NEWSPAPER, Subscriber[])\n\njulia> @async while true\n           if isready(rx1)\n               @show take!(rx1)\n           else\n               wait(rx1)\n           end\n       end\nTask (runnable) @0x00007fbf925c5ae0\n\njulia> @async while true\n           if isready(rx2)\n               @show take!(rx2)\n           else\n               wait(rx2)\n           end\n       end\nTask (runnable) @0x00007fbf92f59ae0\n\njulia> put!(tx1, \"Daisy Duck\")\nRemoteChannel{Channel{Any}}(1, 1, 7)\n","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#Activity-2b:-Test-the-code-1","page":"20 - Using Remote Channels (old stuff)","title":"Activity 2b: Test the code","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Prerequisites:","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Actitvity 2a","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Step Action Comment\n13 Copy all the Test code example code to the clipboard, including the julia prompt and the response \n14 Return to the container \n15 Ctrl-Shfi-V Paste the text on the clipboard in the Julia REPL.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"The result should look like the next example:","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"julia> take!(rx1) = Subscriber(\"15498821131237366424\", \"Donald Duck\", \"\", MEAN_CALCULATOR)\ntake!(rx2) = Publisher(\"8593928998820612462\", \"The New York Times\", NEWSPAPER, Subscriber[])\ntake!(rx1) = Subscriber(\"17785241625571045887\", \"Daisy Duck\", \"\", MEAN_CALCULATOR)","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#Activity-3:-Run-a-function-in-the-remote-container-1","page":"20 - Using Remote Channels (old stuff)","title":"Activity 3: Run a function in the remote container","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Create and save a subscriber in the container test_sshd2. Then display all saved subscribers From a table. See also  RbO.jl.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Prerequisites:","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Activity 1\nActivity 2a & 2b\nThe package SQLite.jl is installed.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Steps:","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Install SQLite.jl\nTry the example code\nUse the RbO.jl documentation","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#.-Install-SQLite.jl-1","page":"20 - Using Remote Channels (old stuff)","title":"1. Install SQLite.jl","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Step Action Comment\n1 Enter test_sshd and start Julia \n2 Go to the package manager \n3 pkg > add SQLite ","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#.-Try-the-example-code-1","page":"20 - Using Remote Channels (old stuff)","title":"2. Try the example code","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Try the code below.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"include(\"main.jl\")\n\naddprocs([(\"rob@172.17.0.3\", 1)])\n\nd[\"test_sshd2\"] = last(workers())\n\n@everywhere using RbO\n\n# define a new function\n@everywhere f1(x) = begin\n  s = createSubscriber(x) # create a subscriber\n\tdb = connect(\"./rbo.sqlite\") # connect to database\n  create(db, \"subscribers\", [s]) # save subscriber in database\nend\n\n# activate remote_body for the new function\ntx1, rx1 = remote_body(d[\"test_sshd2\"], f1)\n\n# create and save the subscriber Donald Duck\nput!(tx1, \"Donald Ducky\")\n\n# the display routine\n@async while true\n\tif isready(rx1)\n  \t@show take!(rx1)\n  else\n    wait(rx1)\n  end\nend\n\n# define a new function for displaying all subscribers\n@everywhere f2(x) = begin\n\tdb = connect(\"./rbo.sqlite\") # connect to database\n\tgather(db, x) # list all items in table x\nend\n\n# activate remote_body for the new function\ntx2, rx2 = remote_body(d[\"test_sshd2\"], f2)\n\n# All subscribers in the table subscribers\nput!(tx2, \"subscribers\")\n\n# the display routine\n@async while true\n\tif isready(rx2)\n  \t@show take!(rx2)\n  else\n    wait(rx2)\n  end\nend\n\n# Remove process\nrmprocs(d[\"test_sshd2\"])\n\n# Remove key from dictionary\ndelete!(d, \"test_sshd2\")\n","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"","category":"page"},{"location":"chapter20/#.-Use-the-RbO.jl-documentation-1","page":"20 - Using Remote Channels (old stuff)","title":"3. Use the RbO.jl documentation","text":"","category":"section"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Use the documentation to do the next steps.","category":"page"},{"location":"chapter20/#","page":"20 - Using Remote Channels (old stuff)","title":"20 - Using Remote Channels (old stuff)","text":"Step Action Comment\n1 Use the command connect to create a link to the on-disk database rbo.sqlite \n2 Use the command 'gather' to retieve data from the SQL table subscribers ","category":"page"},{"location":"chapter9/#.-Introduction-1","page":"9 - Introduction","title":"9. Introduction","text":"","category":"section"},{"location":"chapter9/#","page":"9 - Introduction","title":"9 - Introduction","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter9/#What-is-Docker?-1","page":"9 - Introduction","title":"What is Docker?","text":"","category":"section"},{"location":"chapter9/#What-is-a-Dockerfile-1","page":"9 - Introduction","title":"What is a Dockerfile","text":"","category":"section"},{"location":"chapter9/#What-is-docker-compose-1","page":"9 - Introduction","title":"What is docker-compose","text":"","category":"section"},{"location":"chapter19/#.-Activity-diagrams-1","page":"19 - Activity diagrams","title":"19. Activity diagrams","text":"","category":"section"},{"location":"chapter19/#","page":"19 - Activity diagrams","title":"19 - Activity diagrams","text":"Old stuff I want to keep!","category":"page"},{"location":"chapter19/#General-Ledger-workflow-1","page":"19 - Activity diagrams","title":"General Ledger - workflow","text":"","category":"section"},{"location":"chapter19/#","page":"19 - Activity diagrams","title":"19 - Activity diagrams","text":"⚉ process(entries::JournalEntry)\n↓\narchive(::Array{JournalEntry})\n↓\nbook(::Array{JournalEntry)::Array{Record}\n↓\n◉","category":"page"},{"location":"chapter19/#Sales-workflow-1","page":"19 - Activity diagrams","title":"Sales - workflow","text":"","category":"section"},{"location":"chapter19/#","page":"19 - Activity diagrams","title":"19 - Activity diagrams","text":"⚉ process()::Array{:Order}\n↓\ncreate_training()::Training\n↓\ncreate_org()::Organization\n↓\ncreate_order()::Order\n↓\n◉","category":"page"},{"location":"chapter11/#.-Creating-containers-on-the-Raspberry-Pi-1","page":"11 - Raspberry Pi","title":"11. Creating containers on the Raspberry Pi","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter11/#What-you-will-learn-1","page":"11 - Raspberry Pi","title":"What you will learn","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"Pages = [\"chapter11.md\"]","category":"page"},{"location":"chapter11/#Docker-1","page":"11 - Raspberry Pi","title":"Docker","text":"","category":"section"},{"location":"chapter11/#Dockerfile-1","page":"11 - Raspberry Pi","title":"Dockerfile","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"What I did on 12/01/2019.","category":"page"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"Following the instructions on Dockerize an SSH service.","category":"page"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"FROM ubuntu:18.04\n#FROM ubuntu:16.04\n\nRUN apt-get update && apt-get install -y openssh-server\nRUN mkdir /var/run/sshd\n#RUN echo 'root:THEPASSWORDYOUCREATED' | chpasswd\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nENV NOTVISIBLE \"in users profile\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\n\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]","category":"page"},{"location":"chapter11/#Inter-container-communication-1","page":"11 - Raspberry Pi","title":"Inter container communication","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"What I did on 12/01/2019.","category":"page"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"Following the instructions on Dockerize an SSH service.","category":"page"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"Created the container on Raspberry Pi.\nTried the connection; it works nice but I have to login with a password.","category":"page"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"First created the Dockerfile, then:","category":"page"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"Step Action Comment\n1 ssh pi@192.168.XXX.XXX Login on Raspberry Pi.\n2 $ mkdir test-ssh Create a new folder\n3 $ cd test-ssh Step into the folder\n4 Select the content of the Dockerfile above \n5 Ctrl-C Copy selected text to the clipboard\n6 $ nano Dockerfile Create a new empty file\n7 Shift-Ctrl-V Paste text on clipboard into nano\n8 Ctrl-O Save the file\n9 Ctrl-X Exit nano\n10 $ docker build -t eg_sshd . Create a Docker image from the Dockerfile\n11 $ docker run -d -P --name test_sshd eg_sshd Create a container\n12 $ docker port test_sshd 22 Find port number\n 0.0.0.0:32769 Response\n13 Ctrl-D Leave Raspberry Pi\n14 $ ssh root@192.168.XXX.XXX -p 32769 Login remote on container with ssh","category":"page"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"note: Note\napt-get update && apt-get install -y julia -> doesn't work on Ubuntu 18.04Some Linux command I had to use because RUN echo 'root:THEPASSWORDYOUCREATED' | chpasswd didn't work either.adduser rob\nusermod -aG sudo rob\nsu rob\nsudo -i\nuserdel rob\nsee alsoI also had to run unminimize to get sudo available. unminimize did't work in the container on the Raspberry Pi -> you have to be root.Next step: create the certificates, so you don't have to login with a password (required by Julia). DONE.Yes, I can make a ssh container-container connection between my laptop and the Raspberry Pi. Ubuntu 18.04.Next step is to install Julia on both containers having Ubuntu 18.04 installed.","category":"page"},{"location":"chapter11/#Activity-for-passwordless-for-machine-machine-communication-(Obsolete?)-1","page":"11 - Raspberry Pi","title":"Activity for passwordless for machine -> machine communication (Obsolete?)","text":"","category":"section"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"What I tried three weeks before 12/01/2019: machine -> machine connection.","category":"page"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"Step Action Comment\n1 $ sudo apt-get update \n2 $ sudo apt-get install openssh-client Install ssh client on Ubuntu\n3 $ ls -al ~/.ssh/id_*.pub On Ubuntu\n4 $ ssh-keygen -t rsa -b 4096 -C \"your_email@domain.com\" On Ubuntu\n5 $ ls ~/.ssh/id_* On Ubuntu\n5 $ ssh-copy-id  pi@192.168.XXX.XXX Copy file to Raspberry Pi\n7 $ ssh pi@192.168.XXX.XXX Connect to raspberry pi\n8 $ chmod 700 ~/.ssh Change right the folder .ssh on Raspberry Pi\n9 $ chmod 600 ~/.ssh/authorized_keys Change right of the file autorized_keys on Raspberry Pi","category":"page"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"TODO: Lookup first what I did in the past! Want to use volumes in case container crashes, security, etc.","category":"page"},{"location":"chapter11/#","page":"11 - Raspberry Pi","title":"11 - Raspberry Pi","text":"Step Action Comment\n8 $ chmod 700 ~/.ssh Change right the folder .ssh on Raspberry Pi\n9 $ chmod 600 ~/.ssh/authorized_keys Change right of the file authorized_keys on Raspberry Pi","category":"page"},{"location":"chapter14/#.-Logging-1","page":"14 - Logging","title":"14. Logging","text":"","category":"section"},{"location":"chapter14/#What-you-will-learn-1","page":"14 - Logging","title":"What you will learn","text":"","category":"section"},{"location":"chapter14/#","page":"14 - Logging","title":"14 - Logging","text":"Pages = [\"chapter13.md\"]","category":"page"},{"location":"chapter14/#","page":"14 - Logging","title":"14 - Logging","text":"This link looks intersting: Logging","category":"page"},{"location":"chapter14/#","page":"14 - Logging","title":"14 - Logging","text":"julia> using Logging\n\njulia> io = open(\"log.txt\", \"w+\");\n\njulia> logger = SimpleLogger(io);\n\njulia> with_logger(logger) do\n           @info(\" here is some context specific logging\")\n       end\n\nshell> cat log.txt\n\njulia> flush(io);\n\nshell> cat log.txt\n┌ Info:  here is some context specific logging\n└ @ Main REPL[7]:2\n\njulia> global_logger(logger);\n\njulia> @info(\"All logs will use the global logger by default.\");\n\nshell> cat log.txt\n┌ Info:  here is some context specific logging\n└ @ Main REPL[7]:2\n\njulia> close(io);\n\nshell> cat log.txt\n┌ Info:  here is some context specific logging\n└ @ Main REPL[7]:2\n┌ Info: All logs will use the global logger by default.\n└ @ Main REPL[12]:1","category":"page"},{"location":"chapter2/#.-Overview-Julia-1","page":"2 - Overview Julia","title":"2. Overview Julia","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Pages = [\"chapter2.md\"]","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"There are many excellent courses on Julia. We suppose that the reader has some basic knowledge of Julia, as in Think Julia. We recapitulate the most important differences with other languages.","category":"page"},{"location":"chapter2/#Concatenation-1","page":"2 - Overview Julia","title":"Concatenation","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"In Julia is the asterisk (*) used as a concatenation symbol instead of the plus-sign (+) in other languages.","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"julia> a = \"Hello \"\n\"Hello\"\n\njulia> b = \"World!\"\n\"World!\"\n\njulia> c = a * b\n\"Hello World!\"","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Top","category":"page"},{"location":"chapter2/#Iteration-1","page":"2 - Overview Julia","title":"Iteration","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"See Think Julia, 7. Iteration","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Some examples.","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"julia> range = 0:0.1:0.5π # values from 0 to 0.5π radians (90°), with a step value of 0.1 radian\n0.0:0.1:1.5\n\njulia> y = [sin(x) for x in range] # calculate sin for the values in the variable range\n16-element Array{Float64,1}:\n 0.0                \n 0.09983341664682815\n 0.19866933079506122\n 0.2955202066613396\n 0.3894183423086505\n 0.479425538604203  \n 0.5646424733950355\n 0.6442176872376911\n 0.7173560908995228\n 0.7833269096274834\n 0.8414709848078965\n 0.8912073600614354\n 0.9320390859672264\n 0.963558185417193  \n 0.9854497299884603\n 0.9974949866040544\n\njulia> using Plots\n\njulia> plot(x -> sin(x) , 0:0.1:2π) # passing a value to sin(x)\n\njulia> plot(sin, 0:0.1:2π) # works also\n","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Top","category":"page"},{"location":"chapter2/#Help-1","page":"2 - Overview Julia","title":"Help","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"\njulia> ?\nhelp?> sin\nsearch: sin sinh sind sinc sinpi sincos asin using isinf asinh asind isinteger\n\n  sin(x)\n\n  Compute sine of x, where x is in radians.\n\n  ────────────────────────────────────────────────────────────────────────────\n\n  sin(A::AbstractMatrix)\n\n  Compute the matrix sine of a square matrix A.\n\n  If A is symmetric or Hermitian, its eigendecomposition (eigen) is used to\n  compute the sine. Otherwise, the sine is determined by calling exp.\n\n  Examples\n  ≡≡≡≡≡≡≡≡≡≡\n\n  julia> sin(fill(1.0, (2,2)))\n  2×2 Array{Float64,2}:\n   0.454649  0.454649\n   0.454649  0.454649","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Top","category":"page"},{"location":"chapter2/#User-defined-functions-1","page":"2 - Overview Julia","title":"User defined functions","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"julia> function f(x, ϕ, b)\n         sin(x + ϕ) + b\n       end\nf (generic function with 1 method)\n\njulia> 0.3f(0.5π, 0.1π, 1)\n0.5853169548885461\n","category":"page"},{"location":"chapter2/#Multiple-dispatch-1","page":"2 - Overview Julia","title":"Multiple dispatch","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"In object oriented languages like Java we can overload a method. Julia, however, is a functional language. Here we can use the same function name as long as the signatures are different.","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"julia> f(x) = sin(x) # function with one argument\nf (generic function with 1 methods)\n\njulia> f(x, ψ) = sin(x - ψ)  # function with two arguments\nf (generic function with 2 methods)\n\njulia> f(x, ψ, b) = sin(x - ψ) + b   # function with three arguments\nf (generic function with 3 methods)\n\njulia> f(x::Int64) = sin(x/180 * π) # function in degrees, argument has to be an integer\nf (generic function with 4 methods)\n\njulia> methods(f) # show all methods of the function f\n# 4 methods for generic function \"f\":\n[1] f(x::Int64) in Main at REPL[10]:1\n[2] f(x) in Main at REPL[2]:1\n[3] f(x, ψ) in Main at REPL[3]:1\n[4] f(x, ψ, b) in Main at REPL[4]:1\n\njulia> f(0.5π) # 90 degrees in radians\n1.0\n\njulia> f(0.5π, 0.1π) # with 0.1π phase shift in radians\n0.9510565162951536\n\njulia> f(0.5π, 0.1π, 1)\n1.9510565162951536\n\njulia> f(90) # 90 degrees as integer\n1.0\n\njulia> f(90.0) # should be 0.5π\n0.8939966636005579\n","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Top","category":"page"},{"location":"chapter2/#User-defined-data-structures-1","page":"2 - Overview Julia","title":"User defined data structures","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Julia is not a object oriented programming language. But you can define data structures with constructors, and use the dot notation to refer to its data elements.","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"\njulia> struct Subscriber\n           id::String\n           name::String\n           email::String\n           #constructors\n           Subscriber(name::String) = new( createKey(name), name, \"\" )\n           Subscriber(name::String, email::String) = new( createKey(name), name, email )\n       end # defined Subscriber object\n\njulia> createKey(name::String) = string(hash(name * string(time())))\ncreateKey (generic function with 1 method)\n\njulia> daisy = Subscriber(\"Daisy\")\nSubscriber(\"6761641919537447636\", \"Daisy\", \"\")\n\njulia> daisy.name\n\"Daisy\"","category":"page"},{"location":"chapter2/#Plotting-data-1","page":"2 - Overview Julia","title":"Plotting data","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"See Plots","category":"page"},{"location":"chapter2/#Installing-the-Plots-package-1","page":"2 - Overview Julia","title":"Installing the Plots package","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"julia> ]\n\n(v1.1) pkg> add Plots <Enter>\n\n(v1.1) pkg> Ctrl-C\n\njulia>","category":"page"},{"location":"chapter2/#Using-Plots-1","page":"2 - Overview Julia","title":"Using Plots","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"\njulia> using Plots; gr()\n\njulia> plot(x -> sin(x/180 * π), 0:01:360, xlabel=\"Degrees\", title=\"Plot sin\", label=\"No phase shift\")\n\njulia> ψ = 30 # degrees\n30\n\njulia> plot!( x -> sin( (x - ψ)/180 * π ), 0:01:360, label=\"$(ψ)° phase shift\")\n","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Top","category":"page"},{"location":"chapter2/#Useful-to-know-Version-1.1.1-(2019-05-16)-1","page":"2 - Overview Julia","title":"Useful to know - Version 1.1.1 (2019-05-16)","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Testing conditions","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"julia> x = 5\n5\n\njulia> 0 < x < 6\ntrue\n\njulia> 0 ≤ x ≤ 5 # ≤  is \\le<Tab>\ntrue\n\njulia> 0 ≤ x ≤ 4\nfalse\n\njulia> 5 ≥ x ≥ 0 # ≥ is \\ge<Tab>\ntrue\n\njulia> x ≠ 4 # ≠ is \\ne<Tab>\ntrue\n","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Sets, symbolsπ","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"julia> a = [1, 2, 3]\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\njulia> b = [3, 4, 5]\n3-element Array{Int64,1}:\n 3\n 4\n 5\n\njulia> a ∩ b # ∩ is \\cap<Tab>, also intersect(a, b)\n1-element Array{Int64,1}:\n 3\n\njulia> a ∪ b # ∩ is \\cup<Tab>, also union(a, b)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\njulia> symdiff(a, b) # forgot the symbol\n4-element Array{Int64,1}:\n 1\n 2\n 4\n 5\n\njulia> 3 ∈ a # 3 element of a, \\in<Tab>\ntrue\n\njulia> 3 ∉ a # 3 not an element of a, \\notin<Tab>\nfalse\n\njulia> a ⊆ b # a subset of b, ⊆ is \\subseteq<Tab>\nfalse\n\njulia> b ⊇ [3, 4] # b is superset of [3, 4], ⊆ = \\supseteq<Tab>\ntrue","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Natural constant ℯ and π","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"\njulia> ℯ # \\euler<Tab>\nℯ = 2.7182818284590...\n\njulia> π # \\pi<Tab>\nπ = 3.1415926535897...\n\njulia> factorial(4)\n24\n\njulia> 1*2*3*4\n24","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Functional programming","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"\njulia> a = [2, 3, 4]\n3-element Array{Int64,1}:\n 2\n 3\n 4\n\njulia> map(x -> x^2, a)\n3-element Array{Int64,1}:\n 4\n 9\n16\n\njulia> reduce( (x, y) -> x + y, a)\n9\n\njulia> sum(a)\n9\n\njulia> reduce( (x, y) -> x^2 + y^2, a)\n185\n\njulia> (2^2 + 3^2)^2 + 4^2\n185","category":"page"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Top","category":"page"},{"location":"chapter2/#Summary-1","page":"2 - Overview Julia","title":"Summary","text":"","category":"section"},{"location":"chapter2/#","page":"2 - Overview Julia","title":"2 - Overview Julia","text":"Top","category":"page"},{"location":"chapter5/#.-Creating-modules-1","page":"5 - Creating modules","title":"5. Creating modules","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"UNDER DEVELOPMENT!","category":"page"},{"location":"chapter5/#What-you-will-learn-1","page":"5 - Creating modules","title":"What you will learn","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"Pages = [\"chapter5.md\"]","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"With modules we can build applications. A module is a demarcated unit, with its own namespace. You create a module with the package manages command generate, as we did during step 5 in the activity of the previous chapter.","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"The command created tho next:","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"Project.toml\nsrc/AppliInvoicing.jl","category":"page"},{"location":"chapter5/#AppliInvoicing.jl-1","page":"5 - Creating modules","title":"AppliInvoicing.jl","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"module AppliInvoicing #1\n\ngreet() = print(\"Hello World!\") #2\n\nexport create, process, retrieve_unpaid_invoices, read_bank_statements \\#3\n\ninclude(\"./infrastructure/infrastructure.jl\") #4\n\nend # module\n","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"#1 The module block with its name.","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"#2 Initial the only statements, can be removed.","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"#3 The functions that other programs can use.","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"#4 The path to our model.","category":"page"},{"location":"chapter5/#Exports-1","page":"5 - Creating modules","title":"Exports","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"Exports are the interface to the module. Here you mention the function from the API and infrastructure layers. I don't export elements from the domain; one can use the import statement when a reference is necessary.","category":"page"},{"location":"chapter5/#Dependencies-1","page":"5 - Creating modules","title":"Dependencies","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"The file Project.toml contains the base information of the module and the dependencies.","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"name = \"AppliInvoicing\"\nuuid = \"3941c6da-33b5-11ea-2884-afa98fed5e3b\"\nauthors = [\"Rob Bontekoe <rbontekoe@appligate.nl>\"]\nversion = \"0.2.0\"\n\n[deps]\nAppliGeneralLedger = \"153ef306-36d1-11ea-1f0d-e3f38f84e10d\"\nAppliSales = \"a1ddd20a-2e39-11ea-38f9-6b919ef027c3\"\nCSV = \"336ed68f-0bac-5ca0-87d4-7b16caf5d00b\"\nDataFrames = \"a93c6f00-e57d-5684-b7b6-d8193f3e46c0\"\nDates = \"ade2ca70-3891-5945-98fb-dc099432e06a\"\nLogging = \"56ddb016-857b-54e1-b83d-db4d58db5568\"\nSQLite = \"0aa819cd-b072-5ff4-a722-6bc24af294d9\"\nTest = \"8dfed614-e22c-5e08-85e1-65c5234f0b40\"","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"Initial is the section [deps] empty. Dependencies are automatically if you activate the project mode with: ] activate ./ and add a package.","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"Use update in this mode to receive the latest package versions.","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"Use remove to delete a package from the list.","category":"page"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"Use gc to remove unnecessary stuff.","category":"page"},{"location":"chapter5/#GitHub-1","page":"5 - Creating modules","title":"GitHub","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"In chapter 4 you learned how to create a Julia package at GitHub.","category":"page"},{"location":"chapter5/#Download-a-package-1","page":"5 - Creating modules","title":"Download a package","text":"","category":"section"},{"location":"chapter5/#","page":"5 - Creating modules","title":"5 - Creating modules","text":"To add a package that is not registered at Julialang, you use command add followed by the (git) package name , e.g. add https://github.com/rbontekoe/AppliGeneralLedger.jl.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"(Image: AppliGate)","category":"page"},{"location":"#Building-Business-Applications-with-Julia-1","page":"Business Applications with Julia","title":"Building Business Applications with Julia","text":"","category":"section"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"In this course, you learn to create Julia modules. The software you write makes use of these modules and runs in Docker containers.","category":"page"},{"location":"#Preface-1","page":"Business Applications with Julia","title":"Preface","text":"","category":"section"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"In July 2018, I read an article about a new programming language that was rapidly gaining in popularity, Julia. It appealed to me how you could define a function. Almost exactly as I learned it during my bachelor study electronics: f(x) = 2x² + 3x + 1, in Julia written as f(x) = 2x^2 + 3x + 1. Then I set up a project to learn how to implement the observer pattern. It was easy, but I left it out because I was working on Scala at that moment.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"While working with Scala, I came in touch with the Onion Architecture, after watching Wade Waldron's presentation, Domain-Driven Design, and Onion Architecture. Since then, I use it.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"The ease with which I could build business applications with Julia stayed with me.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"At the beginning of 2019, a recruiter told me that the interest in Scala in the Netherlands was waning. Should I continue with Scala?","category":"page"},{"location":"#A-course-was-born-1","page":"Business Applications with Julia","title":"A course was born","text":"","category":"section"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"I decided to stop with Scala and picked up my Julia observer trial project again. From the code, I created a Julia package, RbO.jl.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"It turned out that you can create effective documentation, using the package Documenter.jl. You write it in the markdown language and can insert examples of how to use your code. During the creation of the HTML code, you can have the cases tested, which is useful if you later expand the module and generate the documentation again. The documentation can be seen at the GitHub Pages.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"I had already a GitHub Pages profile, and thought: \"Why not set up the AppliGate website in this way and link it to my profile.\" I did it: https://www,appligate.nl.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"With trying out so many things with Julia, the problem arose that I could not find specific trials back in my notes. After the success of the website, I thought: \"Why not set up a course where I can register all the interesting things?\".","category":"page"},{"location":"#Developing-Business-Applications-with-Julia-1","page":"Business Applications with Julia","title":"Developing Business Applications with Julia","text":"","category":"section"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"The result is this course Business Applications with Julia I am creating now.","category":"page"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"Rob Bontekoe","category":"page"},{"location":"#Index-(Course-is-under-development)-1","page":"Business Applications with Julia","title":"Index (Course is under development)","text":"","category":"section"},{"location":"#","page":"Business Applications with Julia","title":"Business Applications with Julia","text":"Pages = [\"index.md\",\n\"chapter1.md\",\n\"chapter2.md\",\n\"chapter3.md\",\n\"chapter4.md\",\n\"chapter5.md\",\n\"chapter6.md\",\n\"chapter7.md\",\n\"chapter8.md\",\n\"chapter10.md\",\n\"chapter12.md\",\n\"appendix.md\",\n\"references.md\"]","category":"page"}]
}
